(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{579:function(a,s,t){"use strict";t.r(s);var _=t(13),e=Object(_.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("通常一个需求过完TD之后，后端提供哪些接口，每个接口返回的字段也就已经确定了， 接下来就是前后端并行的开发。但经常会出现进度不一样的情况，有时候前端开发完了接口还没好，一直等待后端接口的话，会严重影响开发效率，采用mock方式可避免这个问题。")]),a._v(" "),t("h2",{attrs:{id:"何为mock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何为mock"}},[a._v("#")]),a._v(" 何为Mock？")]),a._v(" "),t("p",[a._v("Mock是一种根据约定规则进行数据模拟的技术，通过mock我们可以在不修改既有代码的情况下，拦截ajax请求，返回模拟的响应数据。")]),a._v(" "),t("p",[a._v("总结起来mock有以下优点：")]),a._v(" "),t("ol",[t("li",[a._v("让前端攻城师独立于后端进行开发；")]),a._v(" "),t("li",[a._v("通过随机数据，模拟各种场景，增加单元测试的真实性；")]),a._v(" "),t("li",[a._v("开发无侵入；")]),a._v(" "),t("li",[a._v("用法简单，符合直觉的接口；")])]),a._v(" "),t("h2",{attrs:{id:"yapi的mock服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yapi的mock服务"}},[a._v("#")]),a._v(" YApi的Mock服务")]),a._v(" "),t("p",[a._v("mock框架有很多，常见的有mock.js, EasyMock等，为什么选用YApi的mock呢？\n")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("YApi是公司主推的接口管理工具，支持swagger导入；")])]),a._v(" "),t("li",[t("p",[a._v("不用再自己写mock规则，Yapi自带mock服务，能够根据接口的数据结构生成随机数据；")])]),a._v(" "),t("li",[t("p",[a._v("每一个接口都对应一个mock地址，而且地址的规则是固定的 "),t("code",[a._v("${yapi-host}/mock/${appid}/${api-path}")]),a._v(" ，前端可以在不修改既有代码的情况下，通过反向代理调用mock服务；")])])]),a._v(" "),t("h2",{attrs:{id:"如何在项目中接入yapi的mock服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在项目中接入yapi的mock服务"}},[a._v("#")]),a._v(" 如何在项目中接入Yapi的mock服务")]),a._v(" "),t("p",[a._v("以Vue项目为例，前端只需3步就能通过yapi mock数据：")]),a._v(" "),t("p",[t("strong",[a._v("1.  package.json文件，添加一个script")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('scripts {\n  ...\n  \n  "mock": "VUE_APP_MOCK=true VUE_APP_MOCK_BASE_API=/mock/<yapi-AppId>/ajax vue-cli-service serve"，\n}\n')])])]),t("p",[a._v("该命令设置了两个变量，"),t("em",[a._v("VUE_APP_MOCK")]),a._v("指是否启动mock，"),t("em",[a._v("VUE_APP_MOCK_BASE_API")]),a._v("为mock的base api，注意变量名必须以大写的VUE_APP_开头；")]),a._v(" "),t("p",[a._v("以EAS对接平台为例，正常的接口路径为'/ajax/xxxx'，接口的mock地址为'/mock/1859/ajax/xxxxx',那参数VUE_APP_MOCK_BASE_API就可以设置为'/mock/1859/ajax';")]),a._v(" "),t("p",[t("strong",[a._v("2. 创建axios实例的时候根据配置项设置 baseurl")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const http = Axios.create({\n  ...\n  baseURL: process.env.VUE_APP_MOCK\n    ? process.env.VUE_APP_MOCK_BASE_API : process.env.VUE_APP_BASE_API,\n  ...\n});\n")])])]),t("p",[t("em",[a._v("VUE_APP_BASE_API")]),a._v(" 是正常调用接口的base url， 通常为'/ajax';")]),a._v(" "),t("p",[t("strong",[a._v("3. vue.config文件配置 mock服务的反向代理")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const vueConfig = {\n  devServer: {\n    proxy: {\n      '/mock/1859/ajax': {\n        https: true,\n        target: 'https://yapi.xrxr.xyz',\n        ws: true,\n        changeOrigin: true,\n      },\n      '/ajax': {\n        https: true,\n        target: 'https://easproxyadmin.aihaisi.com/',\n        ws: true,\n        changeOrigin: true,\n      },\n    },\n  },\n")])])]),t("p",[a._v("注意顺序：先‘mock/1859/ajax’，后配置‘ajax’")]),a._v(" "),t("p",[a._v("配置完后，运行 npm run mock，启动项目就可以调用YApi的mock服务来mock数据了。")]),a._v(" "),t("h2",{attrs:{id:"yapi-mock服务的一些高级用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yapi-mock服务的一些高级用法"}},[a._v("#")]),a._v(" YApi mock服务的一些高级用法")]),a._v(" "),t("h4",{attrs:{id:"定制生成规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定制生成规则"}},[a._v("#")]),a._v(" 定制生成规则")]),a._v(" "),t("p",[a._v("mock服务会根据接口定义生成随机数据，这些数据能满足接口类型的定义，但是有时候却不合法。例如分页信息pagesize，时间戳类型的字段，mock服务可能会返回一个负数，通过定制字段的规则可以避免这种情况。")]),a._v(" "),t("ol",[t("li",[a._v("YApi中接口页面点击编辑")]),a._v(" "),t("li",[a._v("点击需要调整的字段的设置按钮")]),a._v(" "),t("li",[a._v("在设置弹窗中可以设置规则\n"),t("img",{attrs:{src:"https://hellosean1025.github.io/yapi/documents/images/usage/json-schema-mock.jpg",alt:"image"}})])]),a._v(" "),t("h4",{attrs:{id:"高级mock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级mock"}},[a._v("#")]),a._v(" 高级mock")]),a._v(" "),t("p",[a._v("有时候不同的请求参数、IP地址返回不同的 HTTP Code、HTTP 头和 JSON 数据，yapi的高级mock提供了两种方式来解决这个问题。")]),a._v(" "),t("h5",{attrs:{id:"_1-mock期望"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-mock期望"}},[a._v("#")]),a._v(" 1. Mock期望")]),a._v(" "),t("p",[a._v("YApi提供了交互式的弹窗来添加Mock期望。例如：想mock一下名称是zwj的菜单列表")]),a._v(" "),t("ol",[t("li",[a._v("选中接口，点击高级mock")]),a._v(" "),t("li",[a._v("点击‘添加期望‘按钮，填写过滤规则以及期望返回数据，点击『确定』保存。\n"),t("img",{attrs:{src:"https://hellosean1025.github.io/yapi/documents/images/usage/adv-mock-case3.png",alt:"image"}})]),a._v(" "),t("li",[a._v("运行项目，打开对应的页面，调用接口查看返回的数据，结果就是高级mock中设置的期望返回数据。")])]),a._v(" "),t("h5",{attrs:{id:"_2-自定义脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义脚本"}},[a._v("#")]),a._v(" 2. 自定义脚本")]),a._v(" "),t("p",[a._v("自定义脚本是一种更灵活的方式。Mock期望的方式添加的条件只能是参数等于某个值，才能返回相应的数据，而自定义脚本可以添加一些逻辑判断，根据用户请求的参数修改返回内容。")]),a._v(" "),t("p",[a._v("举个例子：批量同步接口，它接收一个日期范围，同步所有待同步的数据，但如果日期范围超过30天，返回错误提示。这个时候就可以用自定义脚步对mock请求进行判断处理。")]),a._v(" "),t("ol",[t("li",[a._v("切换到脚步选项卡，输入下面的脚步，点击保存")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if (params.end - params.start  > 30*24*60*60*1000) {\n    mockJson.errMessage = '不能大于30天'\n    mockJson.success = false;\n} else {\n    mockJson.success = true;\n}\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("运行项目看下效果\n"),t("img",{attrs:{src:"https://note.youdao.com/yws/api/personal/file/WEB2ae5c51870fc028c0c4b83d35d478dc2?method=download&shareKey=e46267506f4c9dbf11187baae76a3291",alt:"image"}})])]),a._v(" "),t("p",[a._v("Yapi提供了一些全局变量可以在脚本中使用：")]),a._v(" "),t("p",[t("strong",[a._v("请求")])]),a._v(" "),t("ul",[t("li",[a._v("header：请求的 HTTP 头")]),a._v(" "),t("li",[a._v("params：请求参数，包括 Body、Query 中所有参数")]),a._v(" "),t("li",[a._v("cookie：请求带的 Cookies")])]),a._v(" "),t("p",[t("strong",[a._v("响应")])]),a._v(" "),t("ul",[t("li",[a._v("mockJson：接口定义的响应数据 Mock 模板")]),a._v(" "),t("li",[a._v("resHeader：响应的 HTTP 头")]),a._v(" "),t("li",[a._v("httpCode：响应的 HTTP 状态码")]),a._v(" "),t("li",[a._v("delay：Mock 响应延时，单位为 ms")]),a._v(" "),t("li",[a._v("Random：Mock.Random 方法，可以添加自定义占位符,详细使用方法请查看 Wiki")])]),a._v(" "),t("h4",{attrs:{id:"mock-优先级说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mock-优先级说明"}},[a._v("#")]),a._v(" Mock 优先级说明")]),a._v(" "),t("p",[a._v("请求 Mock 数据时，规则匹配优先级：Mock 期望 > 自定义 Mock 脚本 > 项目全局 mock 脚本 > 普通 Mock。")]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("YApi的mock服务真的挺好用的， 接入也很简单，前端小伙伴们可以试着用一用。")])])}),[],!1,null,null,null);s.default=e.exports}}]);