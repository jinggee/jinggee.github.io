(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{576:function(e,t,a){"use strict";a.r(t);var l=a(13),n=Object(l.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("相信刚接触JS的人都会被他的想等性判断给整糊涂，看看下面代码，你能答对几个？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NaN === NaN // false\nNaN == NaN // false\nObject.is(NaN, NaN) // true\n0 == false  // true\n1 == true   // true\nNumber(null) === 0  // true\nnull == 0   // false\n")])])]),a("p",[e._v("Javascript提供了三种不同的值比较操作，分别是严格相等、宽松相等、以及Object.is，希望看完下面的内容，能够彻底弄清楚他的判断逻辑。")]),e._v(" "),a("h3",{attrs:{id:"_1-严格相等-x-y判断逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-严格相等-x-y判断逻辑"}},[e._v("#")]),e._v(" 1. 严格相等 x === y判断逻辑")]),e._v(" "),a("ol",[a("li",[e._v("如果x的数据类型和y的数据类型不相同，返回false；")]),e._v(" "),a("li",[e._v("如果x是Number类型\n"),a("ul",[a("li",[e._v("x是NaN，返回false")]),e._v(" "),a("li",[e._v("y是NaN，返回false")]),e._v(" "),a("li",[e._v("x的值和y的值相等，返回true")]),e._v(" "),a("li",[e._v("x是+0，y是-0，返回true")]),e._v(" "),a("li",[e._v("x是-0，y是+0，返回true")]),e._v(" "),a("li",[e._v("否则返回false")])])]),e._v(" "),a("li",[e._v("其他类型参照SameValueNonNumber(x, y)\n"),a("ul",[a("li",[e._v("断言：x,y不是Number类型;")]),e._v(" "),a("li",[e._v("断言: x,y的数据类型相同;")]),e._v(" "),a("li",[e._v("x是undefined, y是undefined return true;")]),e._v(" "),a("li",[e._v("x是null, y是null,return true;")]),e._v(" "),a("li",[e._v("x是字符串类型,当且仅当x,y字符序列完全相同时（长度相同，每个位置上的字符也相同）返回true, 否则返回false；")]),e._v(" "),a("li",[e._v("如果x是布尔类型，当x,y都为true或者都为false时返回true，否则返回false；")]),e._v(" "),a("li",[e._v("如果x是symbol类型，当x,y是相同的symbol值，返回true，否则返回false;")]),e._v(" "),a("li",[e._v("如果x,y是同一个对象值，返回true，否则返回false;")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NaN === NaN // false\nundefined === undefined // true\nnull === null   // true\nundefined === null  // false\n")])])]),a("h3",{attrs:{id:"_2-宽松相等-x-y"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-宽松相等-x-y"}},[e._v("#")]),e._v(" 2. 宽松相等 x == y")]),e._v(" "),a("ol",[a("li",[e._v("如果x,y的类型相同，返回x===y的结果；")]),e._v(" "),a("li",[e._v("如果x是null, y是undefined， 返回true;")]),e._v(" "),a("li",[e._v("如果x是undefined, y是null, 返回true;")]),e._v(" "),a("li",[e._v("如果x是数值，y是字符串, 返回x == ToNumber(y);")]),e._v(" "),a("li",[e._v("如果x是字符串，y是数值, 返回ToNumber(x) == y;")]),e._v(" "),a("li",[e._v("如果x是布尔类型， 返回ToNumber(x)==y 的结果;")]),e._v(" "),a("li",[e._v("如果y是布尔类型，返回 x==ToNumber(y) 的结果；")]),e._v(" "),a("li",[e._v("如果x是String或Number或Symbol中的一种并且Type(y)是Object，返回 x==ToPrimitive(y) 的结果")]),e._v(" "),a("li",[e._v("如果Type(x)是Object并且Type(y)是String或Number或Symbol中的一种，返回 ToPrimitive(x)==y 的结果")]),e._v(" "),a("li",[e._v("其他返回false")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("12 == '0xc' // true, 0xc是16进制\n12 == '12'  // true\n12 == '12c' // false, 说明ToNumber转换是用的Number()方法\n")])])]),a("p",[a("strong",[e._v("注意")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Number(null) === 0\n但是\nnull == 0 // false, \n")])])]),a("p",[a("img",{attrs:{src:"https://note.youdao.com/yws/api/personal/file/80F144305A624105813BAE3B0D993969?method=download&shareKey=732bddc500706c564c8737fd9855a07d",alt:"image"}})]),e._v(" "),a("h4",{attrs:{id:"_2-1-tonumber将一个值转换为数值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-tonumber将一个值转换为数值类型"}},[e._v("#")]),e._v(" 2.1 ToNumber将一个值转换为数值类型")]),e._v(" "),a("p",[e._v("详情参考"),a("a",{attrs:{href:"http://www.geeee.top/2018/08/21/number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("数值类型转换"),a("OutboundLink")],1)]),e._v(" "),a("ol",[a("li",[e._v("如果是boolean类型， true返回1，false返回0；")]),e._v(" "),a("li",[e._v("如果是数值，只是简单的传入返回；")]),e._v(" "),a("li",[e._v("如果是null，返回0")]),e._v(" "),a("li",[e._v("如果是undefined, 返回NaN;")]),e._v(" "),a("li",[e._v("如果是字符串，字符串如果只包含数字，则将其转换成十进制数；如果是有效的浮点格式，将其转换成对应的浮点数值；如果是二进制或十六进制将其转换成对应的十进制数值；")]),e._v(" "),a("li",[e._v("如果是对象，调用对象的valueOf()方法，然后依照前面规则转换，如果valueOf返回值是NaN，则调用toString()方法，再依照前面的规则转换返回的字符串")])]),e._v(" "),a("h4",{attrs:{id:"_2-2-toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-toprimitive"}},[e._v("#")]),e._v(" 2.2 ToPrimitive")]),e._v(" "),a("p",[e._v("toPrimitive(A)通过尝试调用 A 的A.toString() 和 A.valueOf() 方法，将参数 A 转换为原始值（Primitive）；\nJS中原始类型有：Number、String、Boolean、Null、Undefined;")]),e._v(" "),a("p",[a("strong",[e._v("不同类型对象的valueOf()方法的返回值:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("对象")]),e._v(" "),a("th",[e._v("返回值")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Array")]),e._v(" "),a("td",[e._v("返回数组对象本身。")])]),e._v(" "),a("tr",[a("td",[e._v("Boolean")]),e._v(" "),a("td",[e._v("布尔值")])]),e._v(" "),a("tr",[a("td",[e._v("Date")]),e._v(" "),a("td",[e._v("存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC")])]),e._v(" "),a("tr",[a("td",[e._v("Function")]),e._v(" "),a("td",[e._v("函数本身")])]),e._v(" "),a("tr",[a("td",[e._v("Number")]),e._v(" "),a("td",[e._v("数字值")])]),e._v(" "),a("tr",[a("td",[e._v("Object")]),e._v(" "),a("td",[e._v("对象本身。这是默认情况, 可以覆盖自定义对象的valueOf方法")])]),e._v(" "),a("tr",[a("td",[e._v("String")]),e._v(" "),a("td",[e._v("字符串值")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Array：返回数组对象本身\nvar array = ["ABC", true, 12, -5];\nconsole.log(array.valueOf() === array);   // true\n\n// Date：当前时间距1970年1月1日午夜的毫秒数\nvar date = new Date(2013, 7, 18, 23, 11, 59, 230);\nconsole.log(date.valueOf());   // 1376838719230\n\n// Number：返回数字值\nvar num =  15.26540;\nconsole.log(num.valueOf());   // 15.2654\n\n// 布尔：返回布尔值true或false\nvar bool = true;\nconsole.log(bool.valueOf() === bool);   // true\n\n// new一个Boolean对象\nvar newBool = new Boolean(true);\n// valueOf()返回的是true，两者的值相等\nconsole.log(newBool.valueOf() == newBool);   // true\n// 但是不全等，两者类型不相等，前者是boolean类型，后者是object类型\nconsole.log(newBool.valueOf() === newBool);   // false\n\n// Function：返回函数本身\nfunction foo(){}\nconsole.log( foo.valueOf() === foo );   // true\nvar foo2 =  new Function("x", "y", "return x + y;");\nconsole.log( foo2.valueOf() );\n/*\nƒ anonymous(x,y\n) {\nreturn x + y;\n}\n*/\n\n// Object：返回对象本身\nvar obj = {name: "张三", age: 18};\nconsole.log( obj.valueOf() === obj );   // true\n\n// String：返回字符串值\nvar str = "http://www.xyz.com";\nconsole.log( str.valueOf() === str );   // true\n\n// new一个字符串对象\nvar str2 = new String("http://www.xyz.com");\n// 两者的值相等，但不全等，因为类型不同，前者为string类型，后者为object类型\nconsole.log( str2.valueOf() === str2 );   // false\n')])])]),a("h3",{attrs:{id:"_3-同值相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-同值相等"}},[e._v("#")]),e._v(" 3.同值相等")]),e._v(" "),a("p",[e._v("同值相等由 Object.is 方法判断：")]),e._v(" "),a("ul",[a("li",[e._v("两个值都是 undefined")]),e._v(" "),a("li",[e._v("两个值都是 null")]),e._v(" "),a("li",[e._v("两个值都是 true 或者都是 false")]),e._v(" "),a("li",[e._v("两个值是由相同个数的字符按照相同的顺序组成的字符串")]),e._v(" "),a("li",[e._v("两个值指向同一个对象")]),e._v(" "),a("li",[e._v("两个值都是数字并且\n"),a("ul",[a("li",[e._v("都是正零 +0，")]),e._v(" "),a("li",[e._v("或者都是负零 -0，")]),e._v(" "),a("li",[e._v("或者都是 NaN")]),e._v(" "),a("li",[e._v("都是除零和 NaN 外的其它同一个数字")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Object.is('foo', 'foo');     // true\nObject.is(window, window);   // true\n\nObject.is('foo', 'bar');     // false\nObject.is([], []);           // false\n\nvar foo = { a: 1 };\nvar bar = { a: 1 };\nObject.is(foo, foo);         // true\nObject.is(foo, bar);         // false\n\nObject.is(null, null);       // true\n\nObject.is(true, 'true')     // false\n\n// 特例\nObject.is(0, -0);            // false\nObject.is(0, +0);            // true\nObject.is(-0, -0);           // true\nObject.is(NaN, 0/0);         // true\n")])])]),a("h3",{attrs:{id:"_4-零值相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-零值相等"}},[e._v("#")]),e._v(" 4.零值相等")]),e._v(" "),a("p",[e._v("与同值相等类似，不过会认为 +0 与 -0 相等。")]),e._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("ul",[a("li",[e._v("=== 不做类型转换，当两边的数类型不相同时，直接返回false；当前类型相同且都是数值类型的时候，有一个是NaN，那么结果就是false, 另外 +0 === -0")]),e._v(" "),a("li",[e._v("==运算符，当两边操作数类不相同时会做隐式转换，然后才进行比较，这样的话就会出现 false == 0, '' == false 等现象， 但是Object.is不会做这种转换")])])])}),[],!1,null,null,null);t.default=n.exports}}]);