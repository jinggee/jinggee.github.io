(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{582:function(e,n,t){"use strict";t.r(n);var a=t(13),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eba36c6f269a4489b0229fbb2519d409~tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.awebp?",alt:"image"}})]),e._v(" "),t("h2",{attrs:{id:"写在前边"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前边"}},[e._v("#")]),e._v(" 写在前边")]),e._v(" "),t("p",[e._v("Webpack在前端前端构建工具中可以堪称中流砥柱般的存在，日常业务开发、前端基建工具、高级前端面试...任何场景都会出现它的身影。\n也许对于它的内部实现机制你也许会感到疑惑，日常工作中基于Webpack Plugin/Loader之类查阅API仍然不明白各个参数的含义和应用方式。\n其实这一切原因本质上都是基于Webpack工作流没有一个清晰的认知导致了所谓的“面对API无从下手”开发。\n文章中我们会从如何实现模块分析项目打包的角度出发，使用最通俗，最简洁，最明了的代码带你揭开Webpack背后的神秘面纱，带你实现一个简易版Webpack，从此对于任何webpack相关底层开发了然于胸。\n这里我们只讲「干货」，用最通俗易懂的代码带你走进webpack的工作流。")]),e._v(" "),t("h2",{attrs:{id:"我希望你能掌握的前置知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我希望你能掌握的前置知识"}},[e._v("#")]),e._v(" 我希望你能掌握的前置知识")]),e._v(" "),t("ul",[t("li",[e._v("Tapable")])]),e._v(" "),t("p",[e._v("Tapable包本质上是为我们更方面创建自定义事件和触发自定义事件的库，类似于Nodejs中的EventEmitter Api。\nWebpack中的插件机制就是基于Tapable实现与打包流程解耦，插件的所有形式都是基于Tapable实现。")]),e._v(" "),t("ul",[t("li",[e._v("Webpack Node Api")])]),e._v(" "),t("p",[e._v("基于学习目的我们会着重于Webpack Node Api流程去讲解，实际上我们在前端日常使用的npm run build命令也是通过环境变量调用bin脚本去调用Node Api去执行编译打包。")]),e._v(" "),t("ul",[t("li",[e._v("Babel")])]),e._v(" "),t("p",[e._v("Webpack内部的AST分析同样依赖于Babel进行处理，如果你对Babel不是很熟悉。我建议你可以先去阅读下这两篇文章「前端基建」带你在Babel的世界中畅游、# 从Tree Shaking来走进Babel插件开发者的世界。")]),e._v(" "),t("blockquote",[t("p",[e._v("当然后续我也会去详解这些内容在Webpack中的应用，但是我更加希望在阅读文章之前你可以去点一点上方的文档稍微了解一下前置知识。")])]),e._v(" "),t("h2",{attrs:{id:"流程梳理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程梳理"}},[e._v("#")]),e._v(" 流程梳理")]),e._v(" "),t("p",[e._v("在开始之前我们先对于整个打包流程进行一次梳理。\n这里仅仅是一个全流程的梳理，现在你没有必要非常详细的去思考每一个步骤发生了什么，我们会在接下来的步骤中去一步一步带你串联它们。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1c757a6c9c6416e93dde9db73431e83~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("整体我们将会从上边5个方面来分析==Webpack==打包流程:")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("初始化参数阶段")]),e._v("。\n这一步会从我们配置的webpack.config.js中读取到对应的配置参数和shell命令中传入的参数进行合并得到最终打包配置参数。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("开始编译准备阶段")]),e._v("\n这一步我们会通过调用webpack()方法返回一个compiler方法，创建我们的compiler对象，并且注册各个Webpack Plugin。找到配置入口中的entry代码，调用compiler.run()方法进行编译。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("模块编译阶段")]),e._v("\n从入口模块进行分析，调用匹配文件的loaders对文件进行处理。同时分析模块依赖的模块，递归进行模块编译工作。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("完成编译阶段")]),e._v("\n在递归完成后，每个引用模块通过loaders处理完成同时得到模块之间的相互依赖关系。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("输出文件阶段")]),e._v("\n整理模块依赖关系，同时将处理后的文件输出到ouput的磁盘目录中。")])])]),e._v(" "),t("p",[e._v("接下来让我们详细的去探索每一步究竟发生了什么。")]),e._v(" "),t("h2",{attrs:{id:"创建目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建目录"}},[e._v("#")]),e._v(" 创建目录")]),e._v(" "),t("p",[e._v("工欲善其事，必先利其器。首先让我们创建一个良好的目录来管理我们需要实现的Packing tool吧！\n让我们来创建这样一个目录:\n"),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/936fa765f22542be8c49159fc9feaf38~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("ul",[t("li",[t("p",[e._v("webpack/core存放我们自己将要实现的webpack核心代码。")])]),e._v(" "),t("li",[t("p",[e._v("webpack/example存放我们将用来打包的实例项目。")]),e._v(" "),t("ul",[t("li",[e._v("webpack/example/webpak.config.js配置文件.")]),e._v(" "),t("li",[e._v("webpack/example/src/entry1第一个入口文件")]),e._v(" "),t("li",[e._v("webpack/example/src/entry1第二个入口文件")]),e._v(" "),t("li",[e._v("webpack/example/src/index.js模块文件")])])]),e._v(" "),t("li",[t("p",[e._v("webpack/loaders存放我们的自定义loader。")])]),e._v(" "),t("li",[t("p",[e._v("webpack/plugins存放我们的自定义plugin。")])])]),e._v(" "),t("h2",{attrs:{id:"初始化参数阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化参数阶段"}},[e._v("#")]),e._v(" 初始化参数阶段")]),e._v(" "),t("p",[e._v("往往，我们在日常使用阶段有两种方式去给webpack传递打包参数，让我们先来看看如何传递参数:")]),e._v(" "),t("h3",{attrs:{id:"cli命令行传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cli命令行传递参数"}},[e._v("#")]),e._v(" Cli命令行传递参数")]),e._v(" "),t("p",[e._v("通常，我们在使用调用webpack命令时，有时会传入一定命令行参数，比如:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("webpack "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("mode"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("production\n# 调用webpack命令执行打包 同时传入mode为production\n")])])]),t("h3",{attrs:{id:"webpack-config-js传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-config-js传递参数"}},[e._v("#")]),e._v(" webpack.config.js传递参数")]),e._v(" "),t("p",[e._v("另一种方式，我相信就更加老生常谈了。")]),e._v(" "),t("p",[e._v("我们在项目根目录下使用webpack.config.js导出一个对象进行webpack配置:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const path = require('path')\n\n// 引入loader和plugin ...\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    main: path.resolve(__dirname, './src/entry1.js'),\n    second: path.resolve(__dirname, './src/entry2.js'),\n  },\n  devtool: false,\n  // 基础目录，绝对路径，用于从配置中解析入口点(entry point)和 加载器(loader)。\n  // 换而言之entry和loader的所有相对路径都是相对于这个路径而言的\n  context: process.cwd(),\n  output: {\n    path: path.resolve(__dirname, './build'),\n    filename: '[name].js',\n  },\n  plugins: [new PluginA(), new PluginB()],\n  resolve: {\n    extensions: ['.js', '.ts'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js/,\n        use: [\n          // 使用自己loader有三种方式 这里仅仅是一种\n          path.resolve(__dirname, '../loaders/loader-1.js'),\n          path.resolve(__dirname, '../loaders/loader-2.js'),\n        ],\n      },\n    ],\n  },\n};\n")])])]),t("p",[e._v("同时这份配置文件也是我们需要作为实例项目example下的实例配置，接下来让我们修改example/webpack.config.js中的内容为上述配置吧。")]),e._v(" "),t("blockquote",[t("p",[e._v("当然这里的loader和plugin目前你可以不用理解，接下来我们会逐步实现这些东西并且添加到我们的打包流程中去。")])]),e._v(" "),t("h2",{attrs:{id:"实现合并参数阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现合并参数阶段"}},[e._v("#")]),e._v(" 实现合并参数阶段")]),e._v(" "),t("p",[e._v("这一步，让我们真正开始动手实现我们的webpack吧！")]),e._v(" "),t("p",[e._v("首先让我们在webpack/core下新建一个index.js文件作为核心入口文件。")]),e._v(" "),t("p",[e._v("同时建立一个webpack/core下新建一个webpack.js文件作为webpack()方法的实现文件。")]),e._v(" "),t("p",[e._v("首先，我们清楚在NodeJs Api中是通过webpack()方法去得到compiler对象的。\n"),t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/136db48b37774dad92b87c2009495500~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("此时让我们按照原本的webpack接口格式来补充一下index.js中的逻辑:")]),e._v(" "),t("ul",[t("li",[e._v("我们需要一个webpack方法去执行调用命令。")]),e._v(" "),t("li",[e._v("同时我们引入webpack.config.js配置文件传入webpack方法。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// index.js\nconst webpack = require('./webpack');\nconst config = require('../example/webpack.config');\n// 步骤1: 初始化参数 根据配置文件和shell参数合成参数\nconst compiler = webpack(config);\n")])])]),t("p",[e._v("嗯，看起来还不错。==接下来让我们去实现一下webpack==.js:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function webpack(options) {\n  // 合并参数 得到合并后的参数 mergeOptions\n  const mergeOptions = _mergeOptions(options);\n}\n\n// 合并参数\nfunction _mergeOptions(options) {\n  const shellOptions = process.argv.slice(2).reduce((option, argv) => {\n    // argv -> --mode=production\n    const [key, value] = argv.split('=');\n    if (key && value) {\n      const parseKey = key.slice(2);\n      option[parseKey] = value;\n    }\n    return option;\n  }, {});\n  return { ...options, ...shellOptions };\n}\n\nmodule.exports = webpack;\n")])])]),t("p",[e._v("这里我们需要额外说明的是\n==webpack==文件中需要导出一个名为==webpack==的方法，同时接受外部传入的配置对象。这个是我们在上述讲述过的。")]),e._v(" "),t("p",[e._v("当然关于我们合并参数的逻辑，是将外部传入的对象和执行shell时的传入参数进行最终合并。")]),e._v(" "),t("p",[e._v("在Node Js中我们可以通过process.argv.slice(2)来获得shell命令中传入的参数，比如:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e003c7741b54e5ebf1a5c90f9f96875~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("当然_mergeOptions方法就是一个简单的合并配置参数的方法，相信对于大家来说就是小菜一碟。\n恭喜大家🎉，千里之行始于足下。这一步我们已经完成了打包流程中的第一步：合并配置参数。")]),e._v(" "),t("h2",{attrs:{id:"编译阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[e._v("#")]),e._v(" 编译阶段")]),e._v(" "),t("p",[e._v("在得到最终的配置参数之后，我们需要在webpack()函数中做以下几件事情:")]),e._v(" "),t("ul",[t("li",[e._v("通过参数创建compiler对象。我们看到官方案例中通过调用webpack(options)方法返回的是一个compiler对象。并且同时调用compiler.run()方法启动的代码进行打包。")]),e._v(" "),t("li",[e._v("注册我们定义的webpack plugin插件。")]),e._v(" "),t("li",[e._v("根据传入的配置对象寻找对应的打包入口文件。")])]),e._v(" "),t("h3",{attrs:{id:"创建compiler对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建compiler对象"}},[e._v("#")]),e._v(" 创建compiler对象")]),e._v(" "),t("p",[e._v("让我们先来完成index.js中的逻辑代码补全:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// index.js\nconst webpack = require('./webpack');\nconst config = require('../example/webpack.config');\n// 步骤1: 初始化参数 根据配置文件和shell参数合成参数\n// 步骤2: 调用Webpack(options) 初始化compiler对象  \n// webpack()方法会返回一个compiler对象\n\nconst compiler = webpack(config);\n\n// 调用run方法进行打包\ncompiler.run((err, stats) => {\n  if (err) {\n    console.log(err, 'err');\n  }\n  // ...\n});\n")])])]),t("p",[e._v("可以看到，核心编译实现在于webpack()方法返回的compiler.run()方法上。\n一步一步让我们来完善这个webpack()方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// webpack.js\nfunction webpack(options) {\n  // 合并参数 得到合并后的参数 mergeOptions\n  const mergeOptions = _mergeOptions(options);\n  // 创建compiler对象\n  const compiler = new Compiler(mergeOptions)\n  \n  return compiler\n}\n\n// ...\n")])])]),t("p",[e._v("让我们在webpack/core目录下同样新建一个compiler.js文件，作为compiler的核心实现文件:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// compiler.js\n// Compiler类进行核心编译实现\nclass Compiler {\n  constructor(options) {\n    this.options = options;\n  }\n\n  // run方法启动编译 \n  // 同时run方法接受外部传递的callback\n  run(callback) {\n  }\n}\n\nmodule.exports = Compiler\n")])])]),t("p",[e._v("此时我们的Compiler类就先搭建一个基础的骨架代码。\n目前，我们拥有了:")]),e._v(" "),t("ul",[t("li",[e._v("webpack/core/index.js作为打包命令的入口文件，这个文件引用了我们自己实现的webpack同时引用了外部的webpack.config.js(options)。调用webpack(options).run()开始编译。")]),e._v(" "),t("li",[e._v("webpack/core/webpack.js这个文件目前处理了参数的合并以及传入合并后的参数new Compiler(mergeOptions)，同时返回创建的Compiler实力对象。")]),e._v(" "),t("li",[e._v("webpack/core/compiler，此时我们的compiler仅仅是作为一个基础的骨架，存在一个run()启动方法。")])]),e._v(" "),t("h3",{attrs:{id:"编写plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写plugin"}},[e._v("#")]),e._v(" 编写Plugin")]),e._v(" "),t("p",[e._v("还记得我们在webpack.config.js中使用了两个plugin---pluginA、pluginB插件吗。接下来让我们来依次实现它们:")]),e._v(" "),t("p",[e._v("在实现Plugin前，我们需要先来完善一下compiler方法:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const { SyncHook } = require('tapable');\n\nclass Compiler {\n  constructor(options) {\n    this.options = options;\n    // 创建plugin hooks\n    this.hooks = {\n      // 开始编译时的钩子\n      run: new SyncHook(),\n      // 输出 asset 到 output 目录之前执行 (写入文件之前)\n      emit: new SyncHook(),\n      // 在 compilation 完成时执行 全部完成编译执行\n      done: new SyncHook(),\n    };\n  }\n\n  // run方法启动编译\n  // 同时run方法接受外部传递的callback\n  run(callback) {}\n}\n\nmodule.exports = Compiler;\n")])])]),t("p",[e._v("这里，我们在Compiler这个类的构造函数中创建了一个属性hooks，它的值是三个属性run、emit、done。")]),e._v(" "),t("p",[e._v("关于这三个属性的值就是我们上文提到前置知识的tapable的SyncHook方法，本质上你可以简单将SyncHook()方法理解称为一个Emitter Event类。\n当我们通过new SyncHook()返回一个对象实例后，我们可以通过this.hook.run.tap('name',callback)方法为这个对象上添加事件监听，然后在通过this.hook.run.call()执行所有tap注册的事件。")]),e._v(" "),t("blockquote",[t("p",[e._v("当然webpack真实源码中，这里有非常多的hook。以及分别存在同步/异步钩子，我们这里更多的是为大家讲解清楚流程，所以仅列举了三个常见且简单的同步钩子。")])]),e._v(" "),t("p",[e._v("此时，我们需要明白，我们可以通过Compiler类返回的实例对象上compiler.hooks.run.tap注册钩子。")]),e._v(" "),t("p",[e._v("接下来让我们切回到webpack.js中，让我们来填充关于插件注册的逻辑:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Compiler = require('./compiler');\n\nfunction webpack(options) {\n  // 合并参数\n  const mergeOptions = _mergeOptions(options);\n  // 创建compiler对象\n  const compiler = new Compiler(mergeOptions);\n  // 加载插件\n  _loadPlugin(options.plugins, compiler);\n  return compiler;\n}\n\n// 合并参数\nfunction _mergeOptions(options) {\n  const shellOptions = process.argv.slice(2).reduce((option, argv) => {\n    // argv -> --mode=production\n    const [key, value] = argv.split('=');\n    if (key && value) {\n      const parseKey = key.slice(2);\n      option[parseKey] = value;\n    }\n    return option;\n  }, {});\n  return { ...options, ...shellOptions };\n}\n\n// 加载插件函数\nfunction _loadPlugin(plugins, compiler) {\n  if (plugins && Array.isArray(plugins)) {\n    plugins.forEach((plugin) => {\n      plugin.apply(compiler);\n    });\n  }\n}\n\nmodule.exports = webpack;\n")])])]),t("p",[e._v("这里我们在创建完成compiler对象后，调用了_loadPlugin方法进行注册插件。")]),e._v(" "),t("p",[e._v("有接触过webpack插件开发的同学，或多或少可能都有了解过。"),t("strong",[e._v("任何一个webpack插件都是一个类(当然类本质上都是funciton的语法糖)，每个插件都必须存在一个apply方法")]),e._v("。")]),e._v(" "),t("p",[e._v("这个==apply方==法会接受一个==compiler==对象。我们上边做的就是依次调用传入的plugin的apply方法并且传入我们的compiler对象。")]),e._v(" "),t("blockquote",[t("p",[e._v("这里我请你记住上边的流程，日常我们编写webpack plugin时本质上就是操作compiler对象从而影响打包结果进行。")])]),e._v(" "),t("blockquote",[t("p",[e._v("也许此时你并不是很理解这句话的含义，在我们串联完成整个流程之后我会为大家揭晓这个答案。")])]),e._v(" "),t("p",[e._v("接下来让我们去编写这些个插件:\n不了解插件开发的同学可以去稍微看一下官方的介绍，其实不是很难,我个人强烈建议如果不了解可以先去看看再回来结合上变讲的内容你一定会有所收获的。\n首先让我们先创建文件:\n"),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a53f0ccfda3d46e0adda75c20b69ea9d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// plugin-a.js\n// 插件A\nclass PluginA {\n  apply(compiler) {\n    // 注册同步钩子\n    // 这里的compiler对象就是我们new Compiler()创建的实例哦\n    compiler.hooks.run.tap('Plugin A', () => {\n      // 调用\n      console.log('PluginA');\n    });\n  }\n}\n\nmodule.exports = PluginA;\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// plugin-b.js\nclass PluginB {\n  apply(compiler) {\n    compiler.hooks.done.tap('Plugin B', () => {\n      console.log('PluginB');\n    });\n  }\n}\n\nmodule.exports = PluginB;\n")])])]),t("p",[e._v("看到这里我相信大部分同学都已经反应过来了，compiler.hooks.done.tap不就是我们上边讲到的通过tapable创建一个SyncHook实例然后通过tap方法注册事件吗？")]),e._v(" "),t("p",[e._v("没错！的确是这样，关于==webpack插件本质上就是通过发布订阅的模式，通过compiler上监听事件。然后再打包编译过程中触发监听的事件从而添加一定的逻辑影响打包结果==。")]),e._v(" "),t("p",[e._v("我们在每个插件的apply方法上通过tap在编译准备阶段(也就是调用webpack()函数时)进行订阅对应的事件，当我们的编译执行到一定阶段时发布对应的事件告诉订阅者去执行监听的事件，从而达到在编译阶段的不同生命周期内去触发对应的plugin。")]),e._v(" "),t("blockquote",[t("p",[e._v("所以这里你应该清楚，我们在进行webpack插件开发时，compiler对象上存放着本次打包的所有相关属性，比如options打包的配置，以及我们会在之后讲到的各种属性。")])]),e._v(" "),t("h3",{attrs:{id:"寻找entry入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寻找entry入口"}},[e._v("#")]),e._v(" 寻找entry入口")]),e._v(" "),t("p",[e._v("这之后，我们的绝大多数内容都会放在compiler.js中去实现Compiler这个类实现打包的核心流程。")]),e._v(" "),t("p",[e._v("任何一次打包都需要入口文件，接下来让我们就从真正进入打包编译阶段。首当其冲的事情就是，我们需要根据入口配置文件路径寻找到对应入口文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// compiler.js\nconst { SyncHook } = require('tapable');\nconst { toUnixPath } = require('./utils');\n\nclass Compiler {\n  constructor(options) {\n    this.options = options;\n    // 相对路径跟路径 Context参数\n    this.rootPath = this.options.context || toUnixPath(process.cwd());\n    // 创建plugin hooks\n    this.hooks = {\n      // 开始编译时的钩子\n      run: new SyncHook(),\n      // 输出 asset 到 output 目录之前执行 (写入文件之前)\n      emit: new SyncHook(),\n      // 在 compilation 完成时执行 全部完成编译执行\n      done: new SyncHook(),\n    };\n  }\n\n  // run方法启动编译\n  // 同时run方法接受外部传递的callback\n  run(callback) {\n    // 当调用run方式时 触发开始编译的plugin\n    this.hooks.run.call();\n    // 获取入口配置对象\n    const entry = this.getEntry();\n  }\n\n  // 获取入口文件路径\n  getEntry() {\n    let entry = Object.create(null);\n    const { entry: optionsEntry } = this.options;\n    if (typeof optionsEntry === 'string') {\n      entry['main'] = optionsEntry;\n    } else {\n      entry = optionsEntry;\n    }\n    // 将entry变成绝对路径\n    Object.keys(entry).forEach((key) => {\n      const value = entry[key];\n      if (!path.isAbsolute(value)) {\n        // 转化为绝对路径的同时统一路径分隔符为 /\n        entry[key] = toUnixPath(path.join(this.rootPath, value));\n      }\n    });\n    return entry;\n  }\n}\n\nmodule.exports = Compiler;\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// utils/index.js\n/**\n *\n * 统一路径分隔符 主要是为了后续生成模块ID方便\n * @param {*} path\n * @returns\n */\nfunction toUnixPath(path) {\n  return path.replace(/\\\\/g, '/');\n}\n")])])]),t("p",[e._v("这一步我们通过options.entry处理获得入口文件的绝对路径。")]),e._v(" "),t("p",[e._v("这里有几个需要注意的小点:")]),e._v(" "),t("ul",[t("li",[e._v("==this.hooks.run.call()==")])]),e._v(" "),t("p",[e._v("在我们_loadePlugins函数中对于每一个传入的插件在compiler实例对象中进行了订阅，那么当我们调用run方法时，等于真正开始执行编译。这个阶段相当于我们需要告诉订阅者，发布开始执行的订阅。此时我们通过this.hooks.run.call()执行关于run的所有tap监听方法，从而触发对应的plugin逻辑。")]),e._v(" "),t("ul",[t("li",[e._v("==this.rootPath:==")])]),e._v(" "),t("p",[e._v("在上述的外部webpack.config.js中我们配置了一个 context: process.cwd()，其实真实webpack中这个context值默认也是process.cwd()。")]),e._v(" "),t("p",[e._v("关于它的详细解释你可以在这里看到"),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fentry-context%2F%23root",target:"_blank",rel:"noopener noreferrer"}},[e._v("Context"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("简而言之，这个路径就是我们项目启动的目录路径，任何entry和loader中的相对路径都是针对于context这个参数的相对路径。")]),e._v(" "),t("p",[e._v("这里我们使用this.rootPath在构造函数中来保存这个变量。")]),e._v(" "),t("ul",[t("li",[e._v("toUnixPath工具方法:")])]),e._v(" "),t("p",[e._v("因为不同操作系统下，文件分隔路径是不同的。这里我们统一使用\\来替换路径中的//来替换模块路径。后续我们会使用模块相对于rootPath的路径作为每一个文件的唯一ID，所以这里统一处理下路径分隔符。")]),e._v(" "),t("ul",[t("li",[e._v("entry的处理方法:")])]),e._v(" "),t("p",[e._v("关于entry配置，webpack中其实有很多种。我们这里考虑了比较常见的两种配置方式:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("entry:'entry1.js'\n\n// 本质上这段代码在webpack中会被转化为\nentry: {\n    main:'entry1.js\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("entry: {\n   'entry1':'./entry1.js',\n   'entry2':'/user/wepback/example/src/entry2.js'\n}\n")])])]),t("p",[e._v("这两种方式任何方式都会经过==getEntry==方法最终转化称为{ [模块名]:[模块绝对路径]... }的形式，关于geEntry()方法其实非常简单，这里我就不过于累赘这个方法的实现过程了。")]),e._v(" "),t("p",[e._v("这一步，我们就通过==getEntry==方法获得了一个==key==为==entryName,value为entryAbsolutePath==的对象了，接来下就让我们从入口文件出发进行编译流程吧。")]),e._v(" "),t("h2",{attrs:{id:"模块编译阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块编译阶段"}},[e._v("#")]),e._v(" 模块编译阶段")]),e._v(" "),t("p",[e._v("上边我们讲述了关于编译阶段的准备工作:")]),e._v(" "),t("ul",[t("li",[e._v("目录/文件基础逻辑补充。")]),e._v(" "),t("li",[e._v("通过hooks.tap注册webpack插件。")]),e._v(" "),t("li",[e._v("getEntry方法获得各个入口的对象。")])]),e._v(" "),t("p",[e._v("接下来让我们继续完善compiler.js。")]),e._v(" "),t("p",[e._v("在模块编译阶段，我们需要做的事件:")]),e._v(" "),t("ul",[t("li",[e._v("根据入口文件路径分析入口文件，对于入口文件进行匹配对应的loader进行处理入口文件。")]),e._v(" "),t("li",[e._v("将loader处理完成的入口文件使用webpack进行编译。")]),e._v(" "),t("li",[e._v("分析入口文件依赖，重复上边两个步骤编译对应依赖。")]),e._v(" "),t("li",[e._v("如果嵌套文件存在依赖文件，递归调用依赖模块进行编译。")]),e._v(" "),t("li",[e._v("递归编译完成后，组装一个个包含多个模块的chunk")])]),e._v(" "),t("p",[e._v("首先，我们先来给compiler.js的构造函数中补充一下对应的逻辑:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Compiler {\n  constructor(options) {\n    this.options = options;\n    // 创建plugin hooks\n    this.hooks = {\n      // 开始编译时的钩子\n      run: new SyncHook(),\n      // 输出 asset 到 output 目录之前执行 (写入文件之前)\n      emit: new SyncHook(),\n      // 在 compilation 完成时执行 全部完成编译执行\n      done: new SyncHook(),\n    };\n    // 保存所有入口模块对象\n    this.entries = new Set();\n    // 保存所有依赖模块对象\n    this.modules = new Set();\n    // 所有的代码块对象\n    this.chunks = new Set();\n    // 存放本次产出的文件对象\n    this.assets = new Set();\n    // 存放本次编译所有产出的文件名\n    this.files = new Set();\n  }\n  // ...\n }\n")])])]),t("p",[e._v("这里我们通过给==compiler==构造函数中添加一些列属性来保存关于编译阶段生成的对应资源/模块对象。")]),e._v(" "),t("blockquote",[t("p",[e._v("关于entries\\modules\\chunks\\assets\\files这几个Set对象是贯穿我们核心打包流程的属性，它们各自用来储存编译阶段不同的资源从而最终通过对应的属性进行生成编译后的文件。")])]),e._v(" "),t("h3",{attrs:{id:"根据入口文件路径分析入口文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据入口文件路径分析入口文件"}},[e._v("#")]),e._v(" 根据入口文件路径分析入口文件")]),e._v(" "),t("p",[e._v("上边说到我们在run方法中已经可以通过this.getEntry();获得对应的入口对象了～\n接下来就让我们从入口文件开始去分析入口文件吧！")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Compiler {\n    // run方法启动编译\n  // 同时run方法接受外部传递的callback\n  run(callback) {\n    // 当调用run方式时 触发开始编译的plugin\n    this.hooks.run.call();\n    // 获取入口配置对象\n    const entry = this.getEntry();\n    // 编译入口文件\n    this.buildEntryModule(entry);\n  }\n\n  buildEntryModule(entry) {\n    Object.keys(entry).forEach((entryName) => {\n      const entryPath = entry[entryName];\n      const entryObj = this.buildModule(entryName, entryPath);\n      this.entries.add(entryObj);\n    });\n  }\n  \n  \n  // 模块编译方法\n  buildModule(moduleName,modulePath) {\n    // ...\n    return {}\n  }\n}\n")])])]),t("p",[e._v("这里我们添加了一个名为buildEntryModule方法作为入口模块编译方法。循环入口对象，得到每一个入口对象的名称和路径。")]),e._v(" "),t("blockquote",[t("p",[e._v("比如假使我们在开头传入entry:{ main:'./src/main.js' }的话，buildEntryModule获得的形参entry为{ main: \"/src...[你的绝对路径]\" }, 此时我们buildModule方法接受的entryName为main,entryPath为入口文件main对应的的绝对路径。")])]),e._v(" "),t("blockquote",[t("p",[e._v("单个入口编译完成后，我们会在buildModule方法中返回一个对象。这个对象就是我们编译入口文件后的对象。")])]),e._v(" "),t("h3",{attrs:{id:"buildmodule模块编译方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#buildmodule模块编译方法"}},[e._v("#")]),e._v(" buildModule模块编译方法")]),e._v(" "),t("p",[e._v("在进行代码编写之前，我们先来梳理一下buildModule方法它需要做哪些事情:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("buildModule接受两个参数进行模块编译，"),t("strong",[e._v("第一个为模块所属的入口文件名称")]),e._v("，第二个为需要编译的模块路径。")])]),e._v(" "),t("li",[t("p",[e._v("buildModule方法要进行代码编译的前提就是，通过fs模块根据入口文件路径读取文件源代码。")])]),e._v(" "),t("li",[t("p",[e._v("读取文件内容之后，调用所有匹配的loader对模块进行处理得到返回后的结果。")])]),e._v(" "),t("li",[t("p",[e._v("得到loader处理后的结果后，通过babel分析loader处理后的代码，进行代码编译。(这一步编译主要是针对require语句，修改源代码中require语句的路径)。")])]),e._v(" "),t("li",[t("p",[e._v("如果该入口文件没有依赖与任何模块(require语句)，那么返回编译后的模块对象。")])]),e._v(" "),t("li",[t("p",[e._v("如果该入口文件存在依赖的模块，递归buildModule方法进行模块编译。")])])]),e._v(" "),t("h4",{attrs:{id:"读取文件内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取文件内容"}},[e._v("#")]),e._v(" 读取文件内容")]),e._v(" "),t("ol",[t("li",[e._v("我们先调用fs模块读取文件内容。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const fs = require('fs');\n// ...\nclass Compiler {\n      //...\n      // 模块编译方法\n      buildModule(moduleName, modulePath) {\n        // 1. 读取文件原始代码\n        const originSourceCode =\n          ((this.originSourceCode = fs.readFileSync(modulePath, 'utf-8'));\n        // moduleCode为修改后的代码\n        this.moduleCode = originSourceCode;\n      }\n      \n      // ...\n }\n")])])]),t("h4",{attrs:{id:"调用loader处理匹配后缀文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用loader处理匹配后缀文件"}},[e._v("#")]),e._v(" 调用loader处理匹配后缀文件")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("接下来我们获得了文件的具体内容之后，就需要匹配对应loader对我们的源代码进行编译了。")])]),e._v(" "),t("p",[e._v("=="),t("strong",[e._v("实现简单自定义loader")]),e._v("==\n在进行loader编译前，我们先来实现一下我们上方传入的自定义loader吧。\n"),t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c08cd30dbb0b459f8441cf8b50c0bc84~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("webpack/loader目录下新建loader-1.js,loader-2.js:\n首先我们需要清楚简单来说==loader本质上就是一个函数，接受我们的源代码作为入参同时返回处理后的结果==。")]),e._v(" "),t("blockquote",[t("p",[e._v("关于loader的特性，更加详细你可以在这里看到，因为文章主要讲述打包流程所以loader我们简单的作为倒序处理。更加具体的loader/plugin开发我会在后续的文章详细补充。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// loader本质上就是一个函数，接受原始内容，返回转换后的内容。\nfunction loader1(sourceCode) {\n  console.log('join loader1');\n  return sourceCode + `\\n const loader1 = 'https://github.com/19Qingfeng'`;\n}\n\nmodule.exports = loader1;\n复制代码\nfunction loader2(sourceCode) {\n  console.log('join loader2');\n  return sourceCode + `\\n const loader2 = '19Qingfeng'`;\n}\n\nmodule.exports = loader2;\n")])])]),t("p",[e._v("=="),t("strong",[e._v("使用loader处理文件")]),e._v("==\n在搞清楚了loader就是一个单纯的函数之后，让我们在进行模块分析之前将内容先交给匹配的loader去处理下吧。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 模块编译方法\n  buildModule(moduleName, modulePath) {\n    // 1. 读取文件原始代码\n    const originSourceCode =\n      ((this.originSourceCode = fs.readFileSync(modulePath)), 'utf-8');\n    // moduleCode为修改后的代码\n    this.moduleCode = originSourceCode;\n    //  2. 调用loader进行处理\n    this.handleLoader(modulePath);\n  }\n\n  // 匹配loader处理\n  handleLoader(modulePath) {\n    const matchLoaders = [];\n    // 1. 获取所有传入的loader规则\n    const rules = this.options.module.rules;\n    rules.forEach((loader) => {\n      const testRule = loader.test;\n      if (testRule.test(modulePath)) {\n        if (loader.loader) {\n          // 仅考虑loader { test:/\\.js$/g, use:['babel-loader'] }, { test:/\\.js$/, loader:'babel-loader' }\n          matchLoaders.push(loader.loader);\n        } else {\n          matchLoaders.push(...loader.use);\n        }\n      }\n      // 2. 倒序执行loader传入源代码\n      for (let i = matchLoaders.length - 1; i >= 0; i--) {\n        // 目前我们外部仅支持传入绝对路径的loader模式\n        // require引入对应loader\n        const loaderFn = require(matchLoaders[i]);\n        // 通过loader同步处理我的每一次编译的moduleCode\n        this.moduleCode = loaderFn(this.moduleCode);\n      }\n    });\n  }\n")])])]),t("p",[e._v("这里我们通过handleLoader函数，对于传入的文件路径匹配到对应后缀的loader后，依次倒序执行loader处理我们的代码this.moduleCode并且同步更新每次moduleCode。")]),e._v(" "),t("p",[e._v("最终，在每一个模块编译中this.moduleCode都会经过对应的loader处理。")]),e._v(" "),t("h4",{attrs:{id:"webpack模块编译阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack模块编译阶段"}},[e._v("#")]),e._v(" webpack模块编译阶段")]),e._v(" "),t("p",[e._v("上一步我们经历过loader处理了我们的入口文件代码，并且得到了处理后的代码保存在了this.moduleCode中。")]),e._v(" "),t("p",[e._v("此时，经过loader处理后我们就要进入webpack内部的编译阶段了。")]),e._v(" "),t("p",[e._v("这里我们需要做的是:"),t("strong",[e._v("针对当前模块进行编译，将当前模块所有依赖的模块(require())语句引入的路径变为相对于跟路径(this.rootPath)的相对路径")]),e._v("。")]),e._v(" "),t("blockquote",[t("p",[e._v("总之你需要搞明白的是，我们这里编译的结果是期望将源代码中的依赖模块路径变为相对跟路径的路径，同时建立基础的模块依赖关系。后续我会告诉你为什么针对路径进行编译。")])]),e._v(" "),t("p",[e._v("让我们继续来完善buildModule方法吧:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generator = require('@babel/generator').default;\nconst t = require('@babel/types');\nconst tryExtensions = require('./utils/index')\n// ...\n  class Compiler {\n     // ...\n      \n     // 模块编译方法\n      buildModule(moduleName, modulePath) {\n        // 1. 读取文件原始代码\n        const originSourceCode =\n          ((this.originSourceCode = fs.readFileSync(modulePath)), 'utf-8');\n        // moduleCode为修改后的代码\n        this.moduleCode = originSourceCode;\n        //  2. 调用loader进行处理\n        this.handleLoader(modulePath);\n        // 3. 调用webpack 进行模块编译 获得最终的module对象\n        const module = this.handleWebpackCompiler(moduleName, modulePath);\n        // 4. 返回对应module\n        return module\n      }\n\n      // 调用webpack进行模块编译\n      handleWebpackCompiler(moduleName, modulePath) {\n        // 将当前模块相对于项目启动根目录计算出相对路径 作为模块ID\n        const moduleId = './' + path.posix.relative(this.rootPath, modulePath);\n        // 创建模块对象\n        const module = {\n          id: moduleId,\n          dependencies: new Set(), // 该模块所依赖模块绝对路径地址\n          name: [moduleName], // 该模块所属的入口文件\n        };\n        // 调用babel分析我们的代码\n        const ast = parser.parse(this.moduleCode, {\n          sourceType: 'module',\n        });\n        // 深度优先 遍历语法Tree\n        traverse(ast, {\n          // 当遇到require语句时\n          CallExpression:(nodePath) => {\n            const node = nodePath.node;\n            if (node.callee.name === 'require') {\n              // 获得源代码中引入模块相对路径\n              const requirePath = node.arguments[0].value;\n              // 寻找模块绝对路径 当前模块路径+require()对应相对路径\n              const moduleDirName = path.posix.dirname(modulePath);\n              const absolutePath = tryExtensions(\n                path.posix.join(moduleDirName, requirePath),\n                this.options.resolve.extensions,\n                requirePath,\n                moduleDirName\n              );\n              // 生成moduleId - 针对于跟路径的模块ID 添加进入新的依赖模块路径\n              const moduleId =\n                './' + path.posix.relative(this.rootPath, absolutePath);\n              // 通过babel修改源代码中的require变成__webpack_require__语句\n              node.callee = t.identifier('__webpack_require__');\n              // 修改源代码中require语句引入的模块 全部修改变为相对于跟路径来处理\n              node.arguments = [t.stringLiteral(moduleId)];\n              // 为当前模块添加require语句造成的依赖(内容为相对于根路径的模块ID)\n              module.dependencies.add(moduleId);\n            }\n          },\n        });\n        // 遍历结束根据AST生成新的代码\n        const { code } = generator(ast);\n        // 为当前模块挂载新的生成的代码\n        module._source = code;\n        // 返回当前模块对象\n        return module\n      }\n  }\n")])])]),t("p",[e._v("这一步我们关于webpack编译的阶段就完成了。")]),e._v(" "),t("p",[t("strong",[e._v("需要注意的是")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("这里我们使用babel相关的API针对于require语句进行了编译，如果对于babel相关的api不太了解的朋友可以在前置知识中查看我的另两篇文章。这里我就不在累赘了")])]),e._v(" "),t("li",[t("p",[e._v("同时我们代码中引用了一个tryExtensions()工具方法，这个方法是针对于后缀名不全的工具方法，稍后你就可以看到这个方法的具体内容。")])]),e._v(" "),t("li",[t("p",[e._v("针对于每一次文件编译，我们都会返回一个module对象，这个对象是重中之重。")]),e._v(" "),t("ul",[t("li",[e._v("id属性，表示当前模块针对于this.rootPath的相对目录。")]),e._v(" "),t("li",[e._v("dependencies属性，它是一个Set内部保存了该模块依赖的所有模块的模块ID。")]),e._v(" "),t("li",[e._v("name属性,它表示该模块属于哪个入口文件。")]),e._v(" "),t("li",[e._v("_source属性，它存放模块自身经过babel编译后的字符串代码。")])])])]),e._v(" "),t("p",[e._v("=="),t("strong",[e._v("tryExtensions方法实现")]),e._v("==\n我们在上文的webpack.config.js有这么一个配置：\n"),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d49f431c11e4d83a6ab46f54fefd6b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("熟悉webpack配置的同学可能清楚，resolve.extensions是针对于引入依赖时，在没有书写文件后缀的情况下，webpack会自动帮我们按照传入的规则为文件添加后缀。")]),e._v(" "),t("p",[e._v("在清楚了原理后我们来一起看看utils/tryExtensions方法的实现:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n *\n *\n * @param {*} modulePath 模块绝对路径\n * @param {*} extensions 扩展名数组\n * @param {*} originModulePath 原始引入模块路径\n * @param {*} moduleContext 模块上下文(当前模块所在目录)\n */\nfunction tryExtensions(\n  modulePath,\n  extensions,\n  originModulePath,\n  moduleContext\n) {\n  // 优先尝试不需要扩展名选项\n  extensions.unshift('');\n  for (let extension of extensions) {\n    if (fs.existsSync(modulePath + extension)) {\n      return modulePath + extension;\n    }\n  }\n  // 未匹配对应文件\n  throw new Error(\n    `No module, Error: Can't resolve ${originModulePath} in  ${moduleContext}`\n  );\n}\n")])])]),t("p",[e._v("这个方法很简单，我们通过fs.existsSync检查传入文件结合extensions依次遍历寻找对应匹配的路径是否存在，如果找到则直接返回。如果未找到则给予用于一个友好的提示错误。")]),e._v(" "),t("blockquote",[t("p",[e._v("需要注意 extensions.unshift('');是防止用户如果已经传入了后缀时，我们优先尝试直接寻找，如果可以找到文件那么就直接返回。找不到的情况下才会依次尝试。")])]),e._v(" "),t("h4",{attrs:{id:"递归处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归处理"}},[e._v("#")]),e._v(" 递归处理")]),e._v(" "),t("p",[e._v("经过上一步处理，针对入口文件我们调用buildModule可以得到这样的返回对象。\n我们先来看看运行webpack/core/index.js得到的返回结果吧。\n"),t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6310bca0e92e4171a571e3bdf9ce727d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("我在buildEntryModule中打印了处理完成后的entries对象。可以看到正如我们之前所期待的:")]),e._v(" "),t("ul",[t("li",[e._v("id为每个模块相对于跟路径的模块.(这里我们配置的context:process.cwd())为webpack目录。")]),e._v(" "),t("li",[e._v("dependencies为该模块内部依赖的模块，这里目前还没有添加。")]),e._v(" "),t("li",[e._v("name为该模块所属的入口文件名称。")]),e._v(" "),t("li",[e._v("_source为该模块编译后的源代码。")])]),e._v(" "),t("blockquote",[t("p",[e._v("目前_source中的内容是基于")])]),e._v(" "),t("p",[e._v("此时让我们打开src目录为我们的两个入口文件添加一些依赖和内容吧:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// webpack/example/entry1.js\nconst depModule = require('./module');\n\nconsole.log(depModule, 'dep');\nconsole.log('This is entry 1 !');\n\n\n// webpack/example/entry2.js\nconst depModule = require('./module');\n\nconsole.log(depModule, 'dep');\nconsole.log('This is entry 2 !');\n\n// webpack/example/module.js\nconst name = '19Qingfeng';\n\nmodule.exports = {\n  name,\n};\n")])])]),t("p",[e._v("此时让我们重新运行webpack/core/index.js:\n"),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00e33c57d8d243c68d6bddfc64fbea37~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("OK，目前为止我们针对于entry的编译可以暂时告一段落了。")]),e._v(" "),t("p",[t("strong",[e._v("总之也就是，这一步我们通过``方法将entry进行分析编译后得到一个对象。将这个对象添加到this.entries中去")]),e._v("。")]),e._v(" "),t("p",[e._v("接下来让我们去处理依赖的模块吧。")]),e._v(" "),t("p",[e._v("其实对于依赖的模块无非也是相同的步骤：")]),e._v(" "),t("ul",[t("li",[e._v("检查入口文件中是否存在依赖。")]),e._v(" "),t("li",[e._v("存在依赖的话，递归调用buildModule方法编译模块。传入moduleName为当前模块所属的入口文件。modulePath为当前被依赖模块的绝对路径。")]),e._v(" "),t("li",[e._v("同理检查递归检查被依赖的模块内部是否仍然存在依赖，存在的话递归依赖进行模块编译。这是一个深度优先的过程。")]),e._v(" "),t("li",[e._v("将每一个编译后的模块保存进入this.modules中去。")])]),e._v(" "),t("p",[e._v("接下来我们只要稍稍在handleWebpackCompiler方法中稍稍改动就可以了:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 调用webpack进行模块编译\n  handleWebpackCompiler(moduleName, modulePath) {\n    // 将当前模块相对于项目启动根目录计算出相对路径 作为模块ID\n    const moduleId = './' + path.posix.relative(this.rootPath, modulePath);\n    // 创建模块对象\n    const module = {\n      id: moduleId,\n      dependencies: new Set(), // 该模块所依赖模块绝对路径地址\n      name: [moduleName], // 该模块所属的入口文件\n    };\n    // 调用babel分析我们的代码\n    const ast = parser.parse(this.moduleCode, {\n      sourceType: 'module',\n    });\n    // 深度优先 遍历语法Tree\n    traverse(ast, {\n      // 当遇到require语句时\n      CallExpression: (nodePath) => {\n        const node = nodePath.node;\n        if (node.callee.name === 'require') {\n          // 获得源代码中引入模块相对路径\n          const requirePath = node.arguments[0].value;\n          // 寻找模块绝对路径 当前模块路径+require()对应相对路径\n          const moduleDirName = path.posix.dirname(requirePath);\n          const absolutePath = tryExtensions(\n            path.posix.join(moduleDirName, requirePath),\n            this.options.resolve.extensions,\n            moduleName,\n            moduleDirName\n          );\n          // 生成moduleId - 针对于跟路径的模块ID 添加进入新的依赖模块路径\n          const moduleId =\n            './' + path.posix.relative(this.rootPath, absolutePath);\n          // 通过babel修改源代码中的require变成__webpack_require__语句\n          node.callee = t.identifier('__webpack_require__');\n          // 修改源代码中require语句引入的模块 全部修改变为相对于跟路径来处理\n          node.arguments = [t.stringLiteral(moduleId)];\n          // 为当前模块添加require语句造成的依赖(内容为相对于根路径的模块ID)\n          module.dependencies.add(moduleId);\n        }\n      },\n    });\n    // 遍历结束根据AST生成新的代码\n    const { code } = generator(ast);\n    // 为当前模块挂载新的生成的代码\n    module._source = code;\n    // 递归依赖深度遍历 存在依赖模块则加入\n    module.dependencies.forEach((dependency) => {\n      const depModule = this.buildModule(moduleName, dependency);\n      // 将编译后的任何依赖模块对象加入到modules对象中去\n      this.modules.add(depModule);\n    });\n    // 返回当前模块对象\n    return module;\n  }\n")])])]),t("p",[e._v("这里我们添加了这样一段代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 递归依赖深度遍历 存在依赖模块则加入\n    module.dependencies.forEach((dependency) => {\n      const depModule = this.buildModule(moduleName, dependency);\n      // 将编译后的任何依赖模块对象加入到modules对象中去\n      this.modules.add(depModule);\n    });\n")])])]),t("p",[e._v("这里我们对于依赖的模块进行了递归调用buildModule,将输出的模块对象添加进入了this.modules中去。\n此时让我们重新运行webpack/core/index.js进行编译，这里我在buildEntryModule编译结束后打印了assets和modules:\n"),t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5b1eb97de7c44919ab8f57635d3ab13~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Set {\n  {\n    id: './example/src/entry1.js',\n    dependencies: Set { './example/src/module.js' },\n    name: [ 'main' ],\n    _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n      '\\n' +\n      \"console.log(depModule, 'dep');\\n\" +\n      \"console.log('This is entry 1 !');\\n\" +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  },\n  {\n    id: './example/src/entry2.js',\n    dependencies: Set { './example/src/module.js' },\n    name: [ 'second' ],\n    _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n      '\\n' +\n      \"console.log(depModule, 'dep');\\n\" +\n      \"console.log('This is entry 2 !');\\n\" +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  }\n} entries\nSet {\n  {\n    id: './example/src/module.js',\n    dependencies: Set {},\n    name: [ 'main' ],\n    _source: \"const name = '19Qingfeng';\\n\" +\n      'module.exports = {\\n' +\n      '  name\\n' +\n      '};\\n' +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  },\n  {\n    id: './example/src/module.js',\n    dependencies: Set {},\n    name: [ 'second' ],\n    _source: \"const name = '19Qingfeng';\\n\" +\n      'module.exports = {\\n' +\n      '  name\\n' +\n      '};\\n' +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  }\n} modules\n")])])]),t("p",[e._v("可以看到我们已经将module.js这个依赖如愿以偿加入到modules中了，同时它也经过loader的处理。但是我们发现它被重复加入了两次。")]),e._v(" "),t("p",[e._v("这是因为module.js这个模块被引用了两次，它被entry1和entry2都已进行了依赖，在进行递归编译时我们进行了两次buildModule相同模块。")]),e._v(" "),t("p",[e._v("让我们来处理下这个问题:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("handleWebpackCompiler(moduleName, modulePath) {\n       ...\n        // 通过babel修改源代码中的require变成__webpack_require__语句\n          node.callee = t.identifier('__webpack_require__');\n          // 修改源代码中require语句引入的模块 全部修改变为相对于跟路径来处理\n          node.arguments = [t.stringLiteral(moduleId)];\n          // 转化为ids的数组 好处理\n          const alreadyModules = Array.from(this.modules).map((i) => i.id);\n          if (!alreadyModules.includes(moduleId)) {\n            // 为当前模块添加require语句造成的依赖(内容为相对于根路径的模块ID)\n            module.dependencies.add(moduleId);\n          } else {\n            // 已经存在的话 虽然不进行添加进入模块编译 但是仍要更新这个模块依赖的入口\n            this.modules.forEach((value) => {\n              if (value.id === moduleId) {\n                value.name.push(moduleName);\n              }\n            });\n          }\n        }\n      },\n    });\n    ...\n    }\n")])])]),t("p",[e._v("这里在每一次代码分析的依赖转化中，首先判断this.module对象是否已经存在当前模块了（通过唯一的模块id路径判断）。")]),e._v(" "),t("p",[e._v("如果不存在则添加进入依赖中进行编译，如果该模块已经存在过了就证明这个模块已经被编译过了。所以此时我们不需要将它再次进行编译，我们仅仅需要更新这个模块所属的chunk，为它的name属性添加当前所属的chunk名称。")]),e._v(" "),t("p",[e._v("重新运行，让我们在来看看打印结果:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Set(2) {\n  {\n    id: './example/src/entry1.js',\n    dependencies: Set(1) { './example/src/module.js' },\n    name: [ 'main' ],\n    _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n      '\\n' +\n      \"console.log(depModule, 'dep');\\n\" +\n      \"console.log('This is entry 1 !');\\n\" +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  },\n  {\n    id: './example/src/entry2.js',\n    dependencies: Set(0) {},\n    name: [ 'second' ],\n    _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n      '\\n' +\n      \"console.log(depModule, 'dep');\\n\" +\n      \"console.log('This is entry 2 !');\\n\" +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  }\n} 入口文件\nSet(1) {\n  {\n    id: './example/src/module.js',\n    dependencies: Set(0) {},\n    name: [ 'main', 'second' ],\n    _source: \"const name = '19Qingfeng';\\n\" +\n      'module.exports = {\\n' +\n      '  name\\n' +\n      '};\\n' +\n      \"const loader2 = '19Qingfeng';\\n\" +\n      \"const loader1 = 'https://github.com/19Qingfeng';\"\n  }\n} modules\n")])])]),t("p",[e._v("此时针对我们的“模块编译阶段”基本已经结束了，这一步我们对于所有模块从入口文件开始进行分析。")]),e._v(" "),t("ul",[t("li",[e._v("从入口出发，读取入口文件内容调用匹配loader处理入口文件。")]),e._v(" "),t("li",[e._v("通过babel分析依赖，并且同时将所有依赖的路径更换为相对于项目启动目录options.context的路径。")]),e._v(" "),t("li",[e._v("入口文件中如果存在依赖的话，递归上述步骤编译依赖模块。")]),e._v(" "),t("li",[e._v("将每个依赖的模块编译后的对象加入this.modules。")]),e._v(" "),t("li",[e._v("将每个入口文件编译后的对象加入this.entries。")])]),e._v(" "),t("h2",{attrs:{id:"编译完成阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译完成阶段"}},[e._v("#")]),e._v(" 编译完成阶段")]),e._v(" "),t("p",[e._v("在上一步我们完成了模块之间的编译，并且为module和entry分别填充了内容。")]),e._v(" "),t("p",[e._v("在将所有模块递归编译完成后，我们需要根据上述的依赖关系，组合最终输出的chunk模块。")]),e._v(" "),t("p",[e._v("让我们来继续改造我们的Compiler吧:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Compiler {\n\n    // ...\n    buildEntryModule(entry) {\n        Object.keys(entry).forEach((entryName) => {\n          const entryPath = entry[entryName];\n          // 调用buildModule实现真正的模块编译逻辑\n          const entryObj = this.buildModule(entryName, entryPath);\n          this.entries.add(entryObj);\n          // 根据当前入口文件和模块的相互依赖关系，组装成为一个个包含当前入口所有依赖模块的chunk\n          this.buildUpChunk(entryName, entryObj);\n        });\n        console.log(this.chunks, 'chunks');\n    }\n    \n     // 根据入口文件和依赖模块组装chunks\n      buildUpChunk(entryName, entryObj) {\n        const chunk = {\n          name: entryName, // 每一个入口文件作为一个chunk\n          entryModule: entryObj, // entry编译后的对象\n          modules: Array.from(this.modules).filter((i) =>\n            i.name.includes(entryName)\n          ), // 寻找与当前entry有关的所有module\n        };\n        // 将chunk添加到this.chunks中去\n        this.chunks.add(chunk);\n      }\n      \n      // ...\n}\n")])])]),t("p",[e._v("这里，我们根据对应的入口文件通过每一个模块(module)的name属性查找对应入口的所有依赖文件。")]),e._v(" "),t("p",[e._v("我们先来看看this.chunks最终会输出什么:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Set {\n  {\n    name: 'main',\n    entryModule: {\n      id: './example/src/entry1.js',\n      dependencies: [Set],\n      name: [Array],\n      _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n        '\\n' +\n        \"console.log(depModule, 'dep');\\n\" +\n        \"console.log('This is entry 1 !');\\n\" +\n        \"const loader2 = '19Qingfeng';\\n\" +\n        \"const loader1 = 'https://github.com/19Qingfeng';\"\n    },\n    modules: [ [Object] ]\n  },\n  {\n    name: 'second',\n    entryModule: {\n      id: './example/src/entry2.js',\n      dependencies: Set {},\n      name: [Array],\n      _source: 'const depModule = __webpack_require__(\"./example/src/module.js\");\\n' +\n        '\\n' +\n        \"console.log(depModule, 'dep');\\n\" +\n        \"console.log('This is entry 2 !');\\n\" +\n        \"const loader2 = '19Qingfeng';\\n\" +\n        \"const loader1 = 'https://github.com/19Qingfeng';\"\n    },\n    modules: []\n  }\n}\n")])])]),t("p",[e._v("这一步，我们得到了Webpack中最终输出的两个chunk。\n它们分别拥有:")]),e._v(" "),t("ul",[t("li",[e._v("name:当前入口文件的名称")]),e._v(" "),t("li",[e._v("entryModule: 入口文件编译后的对象。")]),e._v(" "),t("li",[e._v("modules: 该入口文件依赖的所有模块对象组成的数组，其中每一个元素的格式和entryModule是一致的。")])]),e._v(" "),t("p",[e._v("此时编译完成我们拼装chunk的环节就圆满完成。")]),e._v(" "),t("h2",{attrs:{id:"输出文件阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出文件阶段"}},[e._v("#")]),e._v(" 输出文件阶段")]),e._v(" "),t("p",[e._v("我们先放一下上一步所有编译完成后拼装出来的this.chunks。")]),e._v(" "),t("h3",{attrs:{id:"分析原始打包输出结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析原始打包输出结果"}},[e._v("#")]),e._v(" 分析原始打包输出结果")]),e._v(" "),t("p",[e._v("这里，我把webpack/core/index.js中做了如下修改:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- const webpack = require('./webpack');\n+ const webpack = require('webpack')\n\n...\n")])])]),t("p",[e._v("运用原本的webpack代替我们自己实现的webpack先进行一次打包。")]),e._v(" "),t("p",[e._v("运行webpack/core/index.js后，我们会在webpack/src/build中得到两个文件:main.js和second.js,我们以其中一个main.js来看看它的内容:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(() => {\n  var __webpack_modules__ = {\n    './example/src/module.js': (module) => {\n      const name = '19Qingfeng';\n\n      module.exports = {\n        name,\n      };\n\n      const loader2 = '19Qingfeng';\n      const loader1 = 'https://github.com/19Qingfeng';\n    },\n  };\n  // The module cache\n  var __webpack_module_cache__ = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n    // Check if module is in cache\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== undefined) {\n      return cachedModule.exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = (__webpack_module_cache__[moduleId] = {\n      // no module.id needed\n      // no module.loaded needed\n      exports: {},\n    });\n\n    // Execute the module function\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n  var __webpack_exports__ = {};\n  // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n  (() => {\n    const depModule = __webpack_require__(\n      /*! ./module */ './example/src/module.js'\n    );\n\n    console.log(depModule, 'dep');\n    console.log('This is entry 1 !');\n\n    const loader2 = '19Qingfeng';\n    const loader1 = 'https://github.com/19Qingfeng';\n  })();\n})();\n\n")])])]),t("blockquote",[t("p",[e._v("这里我手动删除了打包生成后的多余注释，精简了代码。")])]),e._v(" "),t("p",[e._v("我们来稍微分析一下原始打包生成的代码：")]),e._v(" "),t("p",[e._v("webpack打包后的代码内部定义了一个__webpack_require__的函数代替了NodeJs内部的require方法。\n同时底部的\n"),t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28cda8e5306548d3925a4e36b8547b62~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("这块代码相比大家都很熟悉吧，这就是我们编译后的入口文件代码。同时顶部的代码是该入口文件依赖的所有模块定义的一个对象:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78f606cc93cd4773befe0d7589f75217~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("这里定义了一个__webpack__modules的对象，**对象的key为该依赖模块相对于跟路径的相对路径，对象的value该依赖模块编译后的代码。`")]),e._v(" "),t("h3",{attrs:{id:"输出文件阶段-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出文件阶段-2"}},[e._v("#")]),e._v(" 输出文件阶段")]),e._v(" "),t("p",[e._v("接下里在分析完webpack原始打包后的代码之后，上我们来继续上一步。通过我们的this.chunks来尝试输出最终的效果吧。")]),e._v(" "),t("p",[e._v("让我们回到Compiler上的run方法中:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Compiler {\n   \n   }\n  // run方法启动编译\n  // 同时run方法接受外部传递的callback\n  run(callback) {\n    // 当调用run方式时 触发开始编译的plugin\n    this.hooks.run.call();\n    // 获取入口配置对象\n    const entry = this.getEntry();\n    // 编译入口文件\n    this.buildEntryModule(entry);\n    // 导出列表;之后将每个chunk转化称为单独的文件加入到输出列表assets中\n    this.exportFile(callback);\n  }\n")])])]),t("p",[e._v("我们在buildEntryModule模块编译完成之后，通过this.exportFile方法实现导出文件的逻辑。\n让我们来一起看看this.exportFile方法:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 将chunk加入输出列表中去\n  exportFile(callback) {\n    const output = this.options.output;\n    // 根据chunks生成assets内容\n    this.chunks.forEach((chunk) => {\n      const parseFileName = output.filename.replace('[name]', chunk.name);\n      // assets中 { 'main.js': '生成的字符串代码...' }\n      this.assets[parseFileName] = getSourceCode(chunk);\n    });\n    // 调用Plugin emit钩子\n    this.hooks.emit.call();\n    // 先判断目录是否存在 存在直接fs.write 不存在则首先创建\n    if (!fs.existsSync(output.path)) {\n      fs.mkdirSync(output.path);\n    }\n    // files中保存所有的生成文件名\n    this.files = Object.keys(this.assets);\n    // 将assets中的内容生成打包文件 写入文件系统中\n    Object.keys(this.assets).forEach((fileName) => {\n      const filePath = path.join(output.path, fileName);\n      fs.writeFileSync(filePath, this.assets[fileName]);\n    });\n    // 结束之后触发钩子\n    this.hooks.done.call();\n    callback(null, {\n      toJson: () => {\n        return {\n          entries: this.entries,\n          modules: this.modules,\n          files: this.files,\n          chunks: this.chunks,\n          assets: this.assets,\n        };\n      },\n    });\n  }\n")])])]),t("p",[e._v("exportFile做了如下几件事:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("首先获取配置参数的输出配置，迭代我们的this.chunks，将output.filename中的[name]替换称为对应的入口文件名称。同时根据chunks的内容为this.assets中添加需要打包生成的文件名和文件内容。")])]),e._v(" "),t("li",[t("p",[e._v("将文件写入磁盘前调用plugin的emit钩子函数。")])]),e._v(" "),t("li",[t("p",[e._v("判断output.path文件夹是否存在，如果不存在，则通过fs新建这个文件夹。")])]),e._v(" "),t("li",[t("p",[e._v("将本次打包生成的所有文件名(this.assets的key值组成的数组)存放进入files中去。")])]),e._v(" "),t("li",[t("p",[e._v("循环this.assets，将文件依次写入对应的磁盘中去。")])]),e._v(" "),t("li",[t("p",[e._v("所有打包流程结束，触发webpack插件的done钩子。")])]),e._v(" "),t("li",[t("p",[e._v("同时为NodeJs Webpack APi呼应，调用run方法中外部传入的callback传入两个参数。")])])]),e._v(" "),t("p",[e._v("总的来说，this.assets做的事情也比较简单，就是通过分析chunks得到assets然后输出对应的代码到磁盘中。")]),e._v(" "),t("p",[e._v("仔细看过上边代码，你会发现。this.assets这个Map中每一个元素的value是通过调用getSourceCode(chunk)方法来生成模块对应的代码的。")]),e._v(" "),t("p",[e._v("那么getSourceCode这个方法是如何根据chunk来生成我们最终编译后的代码呢？让我们一起来看看吧！")]),e._v(" "),t("h3",{attrs:{id:"getsourcecode方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getsourcecode方法"}},[e._v("#")]),e._v(" getSourceCode方法")]),e._v(" "),t("p",[e._v("首先我们来简单明确一下这个方法的职责，我们需要getSourceCode方法接受传入的chunk对象。从而返回该chunk的源代码。")]),e._v(" "),t("p",[e._v("废话不多说，其实这里我用了一个比较偷懒的办法，但是完全不妨碍你理解Webpack流程，上边我们分析过原本webpack打包后的代码仅仅只有入口文件和模块依赖是每次打包不同的地方，关于require方法之类都是相通的。")]),e._v(" "),t("p",[e._v("把握每次的不同点，我们直接先来看看它的实现方式:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// webpack/utils/index.js\n\n...\n\n\n/**\n *\n *\n * @param {*} chunk\n * name属性入口文件名称\n * entryModule入口文件module对象\n * modules 依赖模块路径\n */\nfunction getSourceCode(chunk) {\n  const { name, entryModule, modules } = chunk;\n  return `\n  (() => {\n    var __webpack_modules__ = {\n      ${modules\n        .map((module) => {\n          return `\n          '${module.id}': (module) => {\n            ${module._source}\n      }\n        `;\n        })\n        .join(',')}\n    };\n    // The module cache\n    var __webpack_module_cache__ = {};\n\n    // The require function\n    function __webpack_require__(moduleId) {\n      // Check if module is in cache\n      var cachedModule = __webpack_module_cache__[moduleId];\n      if (cachedModule !== undefined) {\n        return cachedModule.exports;\n      }\n      // Create a new module (and put it into the cache)\n      var module = (__webpack_module_cache__[moduleId] = {\n        // no module.id needed\n        // no module.loaded needed\n        exports: {},\n      });\n\n      // Execute the module function\n      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n      // Return the exports of the module\n      return module.exports;\n    }\n\n    var __webpack_exports__ = {};\n    // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n    (() => {\n      ${entryModule._source}\n    })();\n  })();\n  `;\n}\n...\n\n")])])]),t("p",[e._v("这段代码其实非常非常简单，远远没有你想象的多难！有点返璞归真的感觉是吗哈哈。")]),e._v(" "),t("p",[e._v("在getSourceCode方法中，我们通过组合而来的chunk获得对应的:")]),e._v(" "),t("ul",[t("li",[e._v("name: 该入口文件对应输出文件的名称。")]),e._v(" "),t("li",[e._v("entryModule: 存放该入口文件编译后的对象。")]),e._v(" "),t("li",[e._v("modules:存放该入口文件依赖的所有模块的对象。")])]),e._v(" "),t("p",[t("strong",[e._v("我们通过字符串拼接的方式去实现了__webpack__modules对象上的属性，同时也在底部通过${entryModule._source}拼接出入口文件的代码。")])]),e._v(" "),t("blockquote",[t("p",[e._v("这里我们上文提到过为什么要将模块的require方法的路径转化为相对于跟路径(context)的路径，看到这里我相信为什么这么做大家都已经了然于胸了。因为我们最终实现的__webpack_require__方法全都是针对于模块跟路径的相对路径自己实现的require方法。")])]),e._v(" "),t("blockquote",[t("p",[e._v("同时如果不太清楚require方法是如何转变称为__webpack_require__方法的同学可以重新回到我们的编译章节仔细复习熬～我们通过babel在AST转化阶段将require方法调用变成了__webpack_require__。")])]),e._v(" "),t("h2",{attrs:{id:"大功告成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大功告成"}},[e._v("#")]),e._v(" 大功告成")]),e._v(" "),t("p",[e._v("至此，让我们回到webpack/core/index.js中去。重新运行这个文件，你会发现webpack/example目录下会多出一个build目录。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5ec0529023c4b89a1cd2900d4dd8d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("p",[e._v("这一步我们就完美的实现属于我们自己的webpack。")]),e._v(" "),t("p",[e._v("实质上，我们对于实现一个简单版的webpack核心我还是希望大家可以在理解它的工作流的同时彻底理解compiler这个对象。")]),e._v(" "),t("p",[e._v("在之后的任何关于webpack相关底层开发中，真正做到对于compiler的用法了然于胸。了解compiler上的各种属性是如何影响到编译打包结果的。")]),e._v(" "),t("p",[e._v("让我们用一张流程图来进行一个完美的收尾吧:\n"),t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/851da6ae496d45b29e3897bd8282b691~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"image"}})]),e._v(" "),t("h2",{attrs:{id:"写在最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[e._v("#")]),e._v(" 写在最后")]),e._v(" "),t("p",[e._v("首先，感谢每一位可以看到这里的同学。")]),e._v(" "),t("p",[e._v("这篇文章相对有一定的知识门槛并且代码部分居多，敬佩每一位可以读到结尾的同学。")]),e._v(" "),t("p",[e._v("文章中对于实现一个简易版的Webpack在这里就要和大家告一段落了，这其实只是一个最基础版本的webpack工作流。\n但是正是通过这样一个小🌰可以带我们真正入门webpack的核心工作流，希望这篇文章对于大家理解webpack时可以起到更好的辅助作用。")]),e._v(" "),t("p",[e._v("其实在理解清楚基础的工作流之后，针对于loader和plugin开发都是信手拈来的部分，文章中对于这两部分内容的开发介绍比较肤浅，后续我会分别更新有关loader和plugin的详细开发流程。有兴趣的同学可以及时关注😄。")]),e._v(" "),t("p",[e._v("文章中的代码你可以在这里下载，这份简易版的webpack我也会持续在代码库中完善更多工作流的逻辑处理。")]),e._v(" "),t("p",[e._v("同时这里这里的代码我想强调的是源码流程的讲解，真实的webpack会比这里复杂很多很多。这里为了方便大家理解刻意进行了简化，但是核心工作流是和源码中基本一致的。")]),e._v(" "),t("blockquote",[t("p",[e._v("转自：https://juejin.cn/post/7031546400034947108#heading-0")])])])}),[],!1,null,null,null);n.default=o.exports}}]);