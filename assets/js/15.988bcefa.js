(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{577:function(a,t,e){"use strict";e.r(t);var n=e(13),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"一、痛点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、痛点"}},[a._v("#")]),a._v(" 一、痛点")]),a._v(" "),e("p",[a._v("RESTful API是目前常见的接口设计方式，客户端调用接口来进行前后端的交互， 但是调用RESTful API会有下面一些常见的问题：")]),a._v(" "),e("ol",[e("li",[a._v("调用多个API加载资源")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/i-beta/1391054/201911/1391054-20191125164040757-578471587.png",alt:"image"}})]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("后端接口返回大量无用数据")])]),a._v(" "),e("p",[a._v("这些问题会对性能造成一定的影响， 因为http是基于tcp/ip协议的，每个hppt请求建立连接需要一定的开销，另外如果接口中涉及数据库的操作，数据库打开关闭连接也会有一部分的开销，所以通过一次接口调用获取数据比调用多个接口获取数据在性能上更优。另外，如果接口返回大量的无用字段，在数据传输上会造成浪费。")]),a._v(" "),e("p",[a._v("GraphQL能够解决上述两种问题，下面通过一个例子直观的感受下两者的区别。")]),a._v(" "),e("p",[a._v("假如要开发一个新增/修改用户信息的页面，包含姓名、年龄、性别、所属省份，所属省份是下拉框。")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("RESTful API")])])]),a._v(" "),e("p",[a._v("后台提供三个接口：")]),a._v(" "),e("ol",[e("li",[a._v("根据id查询患者信息")]),a._v(" "),e("li",[a._v("查询所有省份")]),a._v(" "),e("li",[a._v("患者保存")])]),a._v(" "),e("p",[a._v("前端：调用接口查询患者信息，调用接口查询所有省份。\n")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("GraphQL")])])]),a._v(" "),e("p",[a._v("后端定义schema")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Query {\n    getUser(id: String): User,\n    getProvince() : [Province];\n}\n\ntype User {\n    id: ID,\n    name: String,\n    age: Int,\n    gender: String,\n    phone: String,\n    address: String\n}\ntype Province {\n    id: ID,\n    name: String\n}\n")])])]),e("p",[a._v("前端构建下面查询，通过一次查询得到想要的结果。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("query {\n    getUser('1') {\n        id,\n        name,\n        age\n    },\n    getProvince {\n      id,\n      name\n    },\n}\n\n返回结果：\n{\n    data: {\n        getUser: {\n            id:'1',\n            name:'张三'，\n            age:22,\n            gender:'女'\n        },\n        getProvince: [{\n            id:1\n            name: '北京'\n        }, {\n            id: 2\n            name: '上海'\n        }]\n    }\n}\n")])])]),e("p",[a._v("下面详细的介绍下GraphQL的基础语法")]),a._v(" "),e("h2",{attrs:{id:"二、graphql介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、graphql介绍"}},[a._v("#")]),a._v(" 二、Graphql介绍")]),a._v(" "),e("blockquote",[e("p",[a._v("GraphQL 是一个用于 API 的查询语言，是一个使用基于==类型系统==来执行查询的服务端运行时（类型系统由你的数据定义）。")])]),a._v(" "),e("blockquote",[e("p",[a._v("一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。")])]),a._v(" "),e("h3",{attrs:{id:"_2-1-对象类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-对象类型"}},[a._v("#")]),a._v(" 2.1 对象类型")]),a._v(" "),e("h4",{attrs:{id:"_2-1-1-graphql如何定义一个对象类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-graphql如何定义一个对象类型"}},[a._v("#")]),a._v(" 2.1.1 "),e("strong",[a._v("GraphQL如何定义一个对象类型")]),a._v("？")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type typeName {\n    /**字段名称 ：字段类型*/\n    fieldName : String\n}\n")])])]),e("ul",[e("li",[a._v("字段类型可以是：")])]),a._v(" "),e("ol",[e("li",[a._v("标量类型：Int、Float、String、Boolean、ID。标量类型表明该字段必定能解析到具体的数据，表示对应 GraphQL 查询的叶子节点。")])]),a._v(" "),e("p",[a._v("可以自定义标量类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("scalar Date\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("枚举类型：是一种特殊的标量")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("enum status {\n  Enable\n  Disable\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("对象类型")])]),a._v(" "),e("p",[a._v("例如职场类型的meetingRooms字段是MeetingRoom数组类型，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Workplace {\n    id: ID,\n    name: String!,\n    city: String!,\n    state: status,\n    meetingRooms: [MeetingRoom]\n}\n\ntype MeetingRoom {\n    name: String,\n    desc: String!\n    logo: String!\n}\n")])])]),e("ul",[e("li",[a._v("类型名后面添加感叹号!表示字段不能为空， 中括号[]表示一个数组")])]),a._v(" "),e("h4",{attrs:{id:"_2-1-2-两个特殊的类型-query、mutation。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-两个特殊的类型-query、mutation。"}},[a._v("#")]),a._v(" 2.1.2 两个特殊的类型：Query、Mutation。")]),a._v(" "),e("p",[a._v("每个GraphQL服务都有一个 query 类型，可能有一个 mutation 类型。通常情况下Query对象类型定义了GraphQL服务所支持的查询操作，Mutation对象类型定义了服务所支持的修改操作。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("schema {\n  query: Query\n  mutation: Mutation\n}\n")])])]),e("p",[a._v("假设我们要做一个职场管理的系统，可以新增，修改职场，可以查询所有职场，可以根据id查询单个职场的详情，那么系统的Query类型和Mutation可以这样定义：")]),a._v(" "),e("h5",{attrs:{id:"query-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#query-类型"}},[a._v("#")]),a._v(" Query 类型")]),a._v(" "),e("p",[a._v("Query类型定义了两个字段，字段GetWorkplaceList的类型是[Workplace]即返回所有职场, 字段GetWorkplaceDetail的返回类型是Workplace即返回单个职场信息。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Query {\n    GetWorkplaceList: [Workplace],\n    GetWorkplaceDetail(id: String): Workplace\n}\n")])])]),e("h5",{attrs:{id:"mutation-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutation-类型"}},[a._v("#")]),a._v(" Mutation 类型")]),a._v(" "),e("p",[a._v("Mutation类型定义了一个字段upsertWorkplace，字段的类型是Workplace，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Mutation {\n    upsertWorkplace(id: String, name: String, city: String): Workplace\n}\n\n")])])]),e("h4",{attrs:{id:"_2-1-3-字段参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-字段参数"}},[a._v("#")]),a._v(" 2.1.3 字段参数")]),a._v(" "),e("p",[a._v("上面在定义Query类型和Mutation类型的时候已经使用了参数，GetWorkplaceDetail字段有个参数id，它是String类型，Mutation对象类型的upsertWorkplace字段有3个参数id, name, city。")]),a._v(" "),e("p",[a._v("语法：字段名（参数名：参数类型），参数可以设置默认值 （参数名：参数类型 = 默认值）")]),a._v(" "),e("p",[a._v("假如查询职场列表可以根据名称进行筛选， 那么字段GetWorkplaceList可以这样改造")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Query {\n    GetWorkplaceList(condition : String): [Workplace],\n    GetWorkplaceDetail(id: String): Workplace\n}\n\n")])])]),e("h4",{attrs:{id:"_2-1-4-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-接口"}},[a._v("#")]),a._v(" 2.1.4 接口")]),a._v(" "),e("p",[a._v("接口相当于对象类型的抽象，接口中包含一些字段，对象类型要实现这个接口，就必须也包含这些字段。")]),a._v(" "),e("p",[a._v("还以职场为例，公司的诊所也属于一种职场，他是医生工作的地方，他与普通职场的区别是除了有会议室还有诊室。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface Workplace {\n    name: String!,\n    city: String!,\n    state: status,\n    meetingRooms: [MeetingRoom]\n}\n\ntype ClinicWorkplace implements Workplace{\n    clinicRooms: [String]    \n}\n\n")])])]),e("p",[a._v("当你要返回一个对象或者一组对象，特别是一组不同的类型时，接口就显得特别有用。")]),a._v(" "),e("h4",{attrs:{id:"_2-1-5-联合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-联合类型"}},[a._v("#")]),a._v(" 2.1.5 联合类型")]),a._v(" "),e("p",[a._v("联合类型和接口十分相似，但是它并不指定类型之间的任何共同字段。如果想返回不止一种对象类型，可以选则使用联合类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Query {\n    GetWorkplaceDetail(id: String): Workplace | ClinicWorkplace\n}\n")])])]),e("p",[a._v("联合类型的成员需要是具体对象类型；你不能使用接口或者其他联合类型来创造一个联合类型。")]),a._v(" "),e("p",[a._v("如果你需要查询一个返回类型是 联合类型的字段，那么你得使用内连片段才能查询任意字段。内连片段... on ClinicWorkplace意思就是，如果查询结果是ClinicWorkplace返回clinicRooms字段。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\n客户端请求\n{\n  GetWorkplaceDetail(id: "1") {\n    name\n    ... on ClinicWorkplace {\n      clinicRooms\n    }\n  }\n}\n')])])]),e("h4",{attrs:{id:"_2-1-6-输入类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-6-输入类型"}},[a._v("#")]),a._v(" 2.1.6 输入类型")]),a._v(" "),e("p",[a._v("如果要给字段传递复杂的对象，可以定义输入类型。例如我们要upser一个职场时，可以传递一个form信息。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Mutation {\n    upsertWorkplace(form: inputForm): Workplace\n}\n\ninput inputForm {\n    id: String,\n    name: String!,\n    city: String!,\n}\n")])])]),e("h3",{attrs:{id:"_2-2-客户端查询、变更"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-客户端查询、变更"}},[a._v("#")]),a._v(" 2.2 客户端查询、变更")]),a._v(" "),e("p",[a._v("继续以职场管理为例，现在服务端定义的schema如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Query {\n    WorkplaceList(condition : queryCondition): [Workplace],\n    WorkplaceDetail(id: String): Workplace\n}\n\ntype Mutation {\n    upsertWorkplace(from: workplaceForm): Workplace\n}\n\ntype Workplace {\n    id: ID!,\n    name: String!,\n    city: String!,\n    address: String,\n    logo: String,\n    state: Int,\n}\n\n\ninput queryCondition {\n    city: String,\n    name: String,\n}\n\ninput workplaceForm {\n    id: ID!,\n    name: String!,\n    city: String!,\n    address: String,\n}\n")])])]),e("h4",{attrs:{id:"_2-2-1-查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-查询"}},[a._v("#")]),a._v(" 2.2.1 查询")]),a._v(" "),e("p",[a._v("客户端要查询id为1的职场名称、所在城市，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("请求：\n\nquery {\n    WorkplaceDetail(\"1\") {\n        name,\n        city\n    }\n}\n\n返回结果：\n\n{\n    data: {\n        WorkplaceDetail: {\n            name: '北京总部'，\n            city:'北京市'\n        }\n    }\n}\n")])])]),e("h4",{attrs:{id:"_2-2-2-别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-别名"}},[a._v("#")]),a._v(" 2.2.2 别名")]),a._v(" "),e("p",[a._v("假如要查询id为1和2的职场名称和所在城市, 如果按照下面的写法，返回结果有有两个WorkplaceDetail，会有冲突，这个时候可以使用别名。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('query {\n    WorkplaceDetail("1") {\n        name,\n        city\n    },\n    WorkplaceDetail("2") {\n        name,\n        city\n    }\n}\n')])])]),e("p",[a._v("使用别名查询，id为1的别名为bj， id为2的别名为sh, 请求代码如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('query {\n    bj:WorkplaceDetail("1") {\n        name,\n        city\n    },\n    sh: WorkplaceDetail("2") {\n        name,\n        city\n    }\n}\n')])])]),e("p",[a._v("此时返回结果是：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    data: {\n        bj: {\n            name: '北京总部'，\n            city:'北京市'\n        },\n        sh: {\n            {\n            name: '上海总部'，\n            city:'上海市'\n        },\n        }\n    }\n}\n")])])]),e("h4",{attrs:{id:"_2-2-3片段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3片段"}},[a._v("#")]),a._v(" 2.2.3片段")]),a._v(" "),e("p",[a._v("片段使你能够组织一组字段，然后在需要它们的的地方引入(可以理解为一段代码的复用)。刚才的例子，查询id为1和2的职场的name和city，每个返回结果都要写一遍，有些重复，使用片段的话可以这样：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('fragment comparisonFields on Workplace {\n  name,\n  city\n}\n\nquery {\n    bj: WorkplaceDetail("1") {\n        ...comparisonFields\n    },\n    sh: WorkplaceDetail("2") {\n        ...comparisonFields\n    }\n}\n')])])]),e("p",[a._v("返回结果")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    data: {\n        bj: {\n            name: '北京总部'，\n            city:'北京市'\n        },\n        sh: {\n            {\n            name: '上海总部'，\n            city:'上海市'\n        },\n        }\n    }\n}\n")])])]),e("h4",{attrs:{id:"操作名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作名称"}},[a._v("#")]),a._v(" 操作名称")]),a._v(" "),e("p",[a._v("操作类型可以是 query、mutation 或 subscription，描述你打算做什么类型的操作，当操作类型是query时，可以不写；")]),a._v(" "),e("p",[a._v("操作名称是你的操作的有意义和明确的名称。它仅在有多个操作的文档中是必需的，但我们鼓励使用它，因为它对于调试和服务器端日志记录非常有用。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('query GetWorkplaceDetail {\n    WorkplaceDetail("1") {\n        name,\n        city\n    }\n}\n')])])]),e("h4",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),e("h4",{attrs:{id:"指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[a._v("#")]),a._v(" 指令")]),a._v(" "),e("ul",[e("li",[a._v("@include(if: Boolean) 仅在参数为 true 时，包含此字段。")]),a._v(" "),e("li",[a._v("@skip(if: Boolean) 如果参数为 true，跳过此字段。")])]),a._v(" "),e("h4",{attrs:{id:"原字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原字段"}},[a._v("#")]),a._v(" 原字段")]),a._v(" "),e("p",[a._v("某些情况下，你并不知道你将从 GraphQL 服务获得什么类型，这时候你就需要一些方法在客户端来决定如何处理这些数据。GraphQL 允许你在查询的任何位置请求 __typename，一个元字段，以获得那个位置的对象类型名称。")]),a._v(" "),e("p",[a._v("GraphQL 库可以让你省略这些简单的解析器，假定一个字段没有提供解析器时，那么应​​该从上层返回对象中读取和返回和这个字段同名的属性。")]),a._v(" "),e("h3",{attrs:{id:"_2-3-解析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-解析器"}},[a._v("#")]),a._v(" 2.3 解析器")]),a._v(" "),e("p",[a._v("以下面查询为例")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("query {\n    WorkplaceDetail(\"1\") {\n        name,\n        city\n    }\n}\n\n返回结果：\n\n{\n    data: {\n        WorkplaceDetail: {\n            name: '北京总部'，\n            city:'北京市'\n        }\n    }\n}\n")])])]),e("p",[a._v("WorkplaceDetail字段调用WorkplaceDetail的解析器")]),a._v(" "),e("p",[a._v("解析器有四个参数：")]),a._v(" "),e("ul",[e("li",[a._v("obj ：上一级解析器返回的对象")]),a._v(" "),e("li",[a._v("args：在 GraphQL 查询中传入的参数")]),a._v(" "),e("li",[a._v("context：请求的上下文，")]),a._v(" "),e("li",[a._v("info：保存与当前查询相关的字段特定信息以及 schema 详细信息的值")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WorkplaceDetail（obj, args, context, info）{\n    return ctx.service.workplace.getWorkplace(args.id);\n}\n")])])]),e("p",[a._v("调用workplace服务的getWorkplace方法，返回一个职场对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    id: '1',\n    name: '北京职场',\n    city: '北京',\n    logo: '',\n    description: '',\n    created: '2020-6-1',\n    updated: '2020-8-1',\n    ...\n}\n")])])]),e("p",[a._v("WorkplaceDetail解析完，GraphQL 继续递归执行下解析name，city。")]),a._v(" "),e("p",[a._v("name解析器：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("name(obj, args, context, info) {\n    return obj.name;\n}\n")])])]),e("p",[a._v("通常name，city解析器不用提供，GraphQL库发现一个字段没有提供解析器时，会从上层返回对象中读取和返回和这个字段同名的属性。")])])}),[],!1,null,null,null);t.default=r.exports}}]);